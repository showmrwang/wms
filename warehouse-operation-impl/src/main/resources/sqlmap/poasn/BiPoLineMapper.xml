<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//ibatis.apache.org//DTD Mapper 3.0//EN"
"http://ibatis.apache.org/dtd/ibatis-3-mapper.dtd">


<mapper namespace="com.baozun.scm.primservice.whoperation.dao.poasn.BiPoLineDao">
	<resultMap id="BiPoLineResult" type="com.baozun.scm.primservice.whoperation.model.poasn.BiPoLine">
	</resultMap>
	<resultMap id="BiPoLinePaginationResult" type="lark.common.dao.Pagination">
    	<collection property="items" javaType="ArrayList" resultMap="BiPoLineResult"/>
	</resultMap>
	
	<!-- 用于select查询公用抽取的列 -->
	<sql id="biPoLineColumns">
	    <![CDATA[
	        	id as id,
	        	po_id as poId,
	        	linenum as linenum,
	        	ext_line_num as extLineNum,
	        	sku_id as skuId,
	        	qty_planned as qtyPlanned,
	        	overshipped as overshipped,
	        	available_qty as availableQty,
	        	ctn_planned as ctnPlanned,
	        	qty_rcvd as qtyRcvd,
	        	ctn_rcvd as ctnRcvd,
	        	status as status,
	        	is_iqc as isIqc,
	        	mfg_date as mfgDate,
	        	exp_date as expDate,
	        	valid_date as validDate,
	        	carton_no as cartonNo,
	        	batch_no as batchNo,
	        	country_of_origin as countryOfOrigin,
	        	inv_status as invStatus,
	        	inv_attr1 as invAttr1,
	        	inv_attr2 as invAttr2,
	        	inv_attr3 as invAttr3,
	        	inv_attr4 as invAttr4,
	        	inv_attr5 as invAttr5,
	        	create_time as createTime,
	        	created_id as createdId,
	        	last_modify_time as lastModifyTime,
	        	modified_id as modifiedId,
	        	uuid as uuid,
	        	po_line_id as poLineId,
	        	inv_type as invType,
	        	valid_date_uom as validDateUom
	    ]]>
	</sql>
	<sql id="biPoLineConditionWhereExt">
		<where>
			<if test="likeEqualsMap != null">
				<foreach collection="likeEqualsMap" index="key"  item="value" separator="and" open=" and "> 
					${key} like CONCAT('%',#{value},'%') 
				</foreach> 
			</if> 
			<if test="equalsMap != null"> 
				<foreach collection="equalsMap" index="key"  item="value" separator="and" open=" and "> 
					${key} = #{value} 
				</foreach> 
			</if> 
			<if test="notEqualsMap != null"> 
				<foreach collection="notEqualsMap" index="key"  item="value" separator="and" open=" and "> 
					${key} != #{value} 
				</foreach> 
			</if> 
			<if test="greateMap != null"> 
				<foreach collection="greateMap" index="key"  item="value" separator="and" open=" and "> 
					${key} &gt; #{value} 
				</foreach> 
			</if> 
			<if test="greateEqualsMap != null"> 
				<foreach collection="greateEqualsMap" index="key"  item="value" separator="and" open=" and "> 
					${key} &gt;= #{value} 
				</foreach> 
			</if> 
			<if test="lessMap != null"> 
				<foreach collection="lessMap" index="key"  item="value" separator="and" open=" and "> 
					${key} &lt; #{value} 
				</foreach> 
			</if> 
			<if test="lessEqualsMap != null"> 
				<foreach collection="lessEqualsMap" index="key"  item="value" separator="and" open=" and "> 
					${key} &lt;= #{value} 
				</foreach> 
			</if> 
			<if test="nullMap != null"> 
				<foreach collection="nullMap" index="key"  item="value" separator="and" open=" and "> 
					${key} is null 
				</foreach> 
			</if> 
			<if test="notNullMap != null"> 
				<foreach collection="notNullMap" index="key"  item="value" separator="and" open=" and "> 
					${key} is not null 
				</foreach> 
			</if> 
			<if test="inMap != null"> 
				<foreach collection="inMap" index="key"  item="value" separator="and" open=" and (" close=")"> 
					<foreach collection="value" item="itemin" index="index" separator="or"> 
						${key} = #{itemin} 
					</foreach> 
				</foreach> 
			</if> 
			<if test="notInMap != null"> 
				<foreach collection="notInMap" index="key"  item="value" separator="and" open=" and (" close=")"> 
					<foreach collection="value" item="itemin" index="index" separator="and"> 
						${key} != #{itemin} 
					</foreach> 
				</foreach> 
			</if> 
		</where>
		<if test="sortBy != null"> 
			<foreach collection="sortBy" item="item" separator=","  open=" order by "> 
				${item.field} ${item.type}
			</foreach> 
		</if>
	</sql>
	
		<!-- 如果有自增字段 -->
		
			<!-- useGeneratedKeys="true" keyProperty="xxx" for sqlserver and mysql -->
			<insert id="insert" parameterType="com.baozun.scm.primservice.whoperation.model.poasn.BiPoLine" 
				
			 flushCache="true">
		    <![CDATA[
		        INSERT INTO
		        t_bi_po_line (
		        id,
		        	po_id ,
		        	linenum ,
		        	ext_line_num ,
		        	sku_id ,
		        	qty_planned ,
		        	overshipped ,
		        	available_qty ,
		        	ctn_planned ,
		        	qty_rcvd ,
		        	ctn_rcvd ,
		        	status ,
		        	is_iqc ,
		        	mfg_date ,
		        	exp_date ,
		        	valid_date ,
		        	carton_no ,
		        	batch_no ,
		        	country_of_origin ,
		        	inv_status ,
		        	inv_attr1 ,
		        	inv_attr2 ,
		        	inv_attr3 ,
		        	inv_attr4 ,
		        	inv_attr5 ,
		        	create_time ,
		        	created_id ,
		        	last_modify_time ,
		        	modified_id ,
		        	uuid ,
		        	po_line_id ,
		        	inv_type ,
		        	valid_date_uom 
		        ) select
		        #{id,javaType=java.lang.Long,jdbcType=BIGINT} ,
		        	#{poId,javaType=java.lang.Long,jdbcType=BIGINT} ,
		        	ifnull(#{linenum,javaType=java.lang.Integer,jdbcType=INTEGER},ifnull((select max(linenum) from t_bi_po_line line where line.po_id=#{poId}),0)+1),
		        	#{extLineNum,javaType=java.lang.String,jdbcType=VARCHAR} ,
		        	#{skuId,javaType=java.lang.Long,jdbcType=BIGINT} ,
		        	#{qtyPlanned,javaType=java.lang.Double,jdbcType=DECIMAL} ,
		        	#{overshipped,javaType=java.lang.Double,jdbcType=DECIMAL} ,
		        	#{availableQty,javaType=java.lang.Double,jdbcType=DECIMAL} ,
		        	#{ctnPlanned,javaType=java.lang.Integer,jdbcType=INTEGER} ,
		        	#{qtyRcvd,javaType=java.lang.Double,jdbcType=DECIMAL} ,
		        	#{ctnRcvd,javaType=java.lang.Integer,jdbcType=INTEGER} ,
		        	#{status,javaType=java.lang.Integer,jdbcType=INTEGER} ,
		        	#{isIqc,javaType=java.lang.Boolean,jdbcType=BIT} ,
		        	#{mfgDate,javaType=java.util.Date,jdbcType=TIMESTAMP} ,
		        	#{expDate,javaType=java.util.Date,jdbcType=TIMESTAMP} ,
		        	#{validDate,javaType=java.lang.Integer,jdbcType=INTEGER} ,
		        	#{cartonNo,javaType=java.lang.String,jdbcType=VARCHAR} ,
		        	#{batchNo,javaType=java.lang.String,jdbcType=VARCHAR} ,
		        	#{countryOfOrigin,javaType=java.lang.String,jdbcType=VARCHAR} ,
		        	#{invStatus,javaType=java.lang.Long,jdbcType=BIGINT} , 
		        	#{invAttr1,javaType=java.lang.String,jdbcType=VARCHAR} ,
		        	#{invAttr2,javaType=java.lang.String,jdbcType=VARCHAR} ,
		        	#{invAttr3,javaType=java.lang.String,jdbcType=VARCHAR} ,
		        	#{invAttr4,javaType=java.lang.String,jdbcType=VARCHAR} ,
		        	#{invAttr5,javaType=java.lang.String,jdbcType=VARCHAR} ,
		        	#{createTime,javaType=java.util.Date,jdbcType=TIMESTAMP} ,
		        	#{createdId,javaType=java.lang.Long,jdbcType=BIGINT} ,
		        	#{lastModifyTime,javaType=java.util.Date,jdbcType=TIMESTAMP} ,
		        	#{modifiedId,javaType=java.lang.Long,jdbcType=BIGINT} ,
		        	#{uuid,javaType=java.lang.String,jdbcType=VARCHAR} ,
		        	#{poLineId,javaType=java.lang.Long,jdbcType=BIGINT} ,
		        	#{invType,javaType=java.lang.String,jdbcType=VARCHAR} ,
		        	#{validDateUom,javaType=java.lang.String,jdbcType=VARCHAR} 
		        
		    ]]>

		</insert>
		
		
		<update id="update" parameterType="com.baozun.scm.primservice.whoperation.model.poasn.BiPoLine">
	    <![CDATA[
	        UPDATE t_bi_po_line SET
		        po_id = #{poId,javaType=java.lang.Long,jdbcType=BIGINT} ,
		        linenum = #{linenum,javaType=java.lang.Integer,jdbcType=INTEGER} ,
		        ext_line_num = #{extLineNum,javaType=java.lang.String,jdbcType=VARCHAR} ,
		        sku_id = #{skuId,javaType=java.lang.Long,jdbcType=BIGINT} ,
		        qty_planned = #{qtyPlanned,javaType=java.lang.Double,jdbcType=DECIMAL} ,
		        overshipped = #{overshipped,javaType=java.lang.Double,jdbcType=DECIMAL} ,
		        available_qty = #{availableQty,javaType=java.lang.Double,jdbcType=DECIMAL} ,
		        ctn_planned = #{ctnPlanned,javaType=java.lang.Integer,jdbcType=INTEGER} ,
		        qty_rcvd = #{qtyRcvd,javaType=java.lang.Double,jdbcType=DECIMAL} ,
		        ctn_rcvd = #{ctnRcvd,javaType=java.lang.Integer,jdbcType=INTEGER} ,
		        status = #{status,javaType=java.lang.Integer,jdbcType=INTEGER} ,
		        is_iqc = #{isIqc,javaType=java.lang.Boolean,jdbcType=BIT} ,
		        mfg_date = #{mfgDate,javaType=java.util.Date,jdbcType=TIMESTAMP} ,
		        exp_date = #{expDate,javaType=java.util.Date,jdbcType=TIMESTAMP} ,
		        valid_date = #{validDate,javaType=java.lang.Integer,jdbcType=INTEGER} ,
		        carton_no = #{cartonNo,javaType=java.lang.String,jdbcType=VARCHAR} ,
		        batch_no = #{batchNo,javaType=java.lang.String,jdbcType=VARCHAR} ,
		        country_of_origin = #{countryOfOrigin,javaType=java.lang.String,jdbcType=VARCHAR} ,
		        inv_status = #{invStatus,javaType=java.lang.Long,jdbcType=BIGINT} ,
		        inv_attr1 = #{invAttr1,javaType=java.lang.String,jdbcType=VARCHAR} ,
		        inv_attr2 = #{invAttr2,javaType=java.lang.String,jdbcType=VARCHAR} ,
		        inv_attr3 = #{invAttr3,javaType=java.lang.String,jdbcType=VARCHAR} ,
		        inv_attr4 = #{invAttr4,javaType=java.lang.String,jdbcType=VARCHAR} ,
		        inv_attr5 = #{invAttr5,javaType=java.lang.String,jdbcType=VARCHAR} ,
		        create_time = #{createTime,javaType=java.util.Date,jdbcType=TIMESTAMP} ,
		        created_id = #{createdId,javaType=java.lang.Long,jdbcType=BIGINT} ,
		        last_modify_time = #{lastModifyTime,javaType=java.util.Date,jdbcType=TIMESTAMP} ,
		        modified_id = #{modifiedId,javaType=java.lang.Long,jdbcType=BIGINT} ,
		        uuid = #{uuid,javaType=java.lang.String,jdbcType=VARCHAR} ,
		        po_line_id = #{poLineId,javaType=java.lang.Long,jdbcType=BIGINT} ,
		        inv_type = #{invType,javaType=java.lang.String,jdbcType=VARCHAR} ,
		        valid_date_uom = #{validDateUom,javaType=java.lang.String,jdbcType=VARCHAR} 
	        WHERE 
		        id = #{id} 
	    ]]>
		</update>
		<update id="batchUpdate">
	        UPDATE t_bi_po_line SET
	        	<foreach collection="batchUpdateMap" index="key"  item="value" separator=",">
	        		${key} = #{value}
	        	</foreach>
	        	<include refid="biPoLineConditionWhereExt"/>
		</update>
		
	   <delete id="delete" parameterType="java.lang.Long">
	    <![CDATA[
	        delete from t_bi_po_line where
		        id = #{id} 
	    ]]>
	    </delete> 
	    
	     <delete id="deleteByIds" parameterType="list">
	    
	        delete from t_bi_po_line 
	        where id in
				<foreach item="item" index="index" collection="list" open="(" separator="," close=")">
#{item}				</foreach>	
	  
	    </delete>  
	    <update id="batchDelete">
	        delete from t_bi_po_line <include refid="biPoLineConditionWhereExt"/>
		</update>
	         
	    <select id="findById" parameterType="java.lang.Long" resultMap="BiPoLineResult" flushCache="false">
			select <include refid="biPoLineColumns" />
		    <![CDATA[
			    from t_bi_po_line 
		        where 
		        id = #{id} 
		    ]]>
		</select>	
		<select id="getByIds" parameterType="list"  resultMap="BiPoLineResult" flushCache="false">
			select <include refid="biPoLineColumns" />
			    from t_bi_po_line 
		        where id in
				<foreach item="item" index="index" collection="list" open="(" separator="," close=")">
#{item}				</foreach>					
		</select>	
	<sql id="biPoLineDynamicWhere">
		<!-- ognl访问静态方法的表达式 为@class@method(args),以下为调用rapid中的Ognl.isNotEmpty()方法,还有其它方法如isNotBlank()可以使用，具体请查看Ognl类 -->
		<where>
	       
				<if test="id!=null">
					and id = #{id}
				</if>
	       
				<if test="poId!=null">
					and po_id = #{poId}
				</if>
	       
				<if test="linenum!=null">
					and linenum = #{linenum}
				</if>
				
				<if test="extLineNum!=null and extLineNum!=''">
					and ext_line_num = #{extLineNum}
				</if>
	       
				<if test="skuId!=null">
					and sku_id = #{skuId}
				</if>
	       
				<if test="qtyPlanned!=null">
					and qty_planned = #{qtyPlanned}
				</if>
	       
				<if test="overshipped!=null">
					and overshipped = #{overshipped}
				</if>
	       
				<if test="availableQty!=null">
					and available_qty = #{availableQty}
				</if>
	       
				<if test="ctnPlanned!=null">
					and ctn_planned = #{ctnPlanned}
				</if>
	       
				<if test="qtyRcvd!=null">
					and qty_rcvd = #{qtyRcvd}
				</if>
	       
				<if test="ctnRcvd!=null">
					and ctn_rcvd = #{ctnRcvd}
				</if>
	       
				<if test="status!=null">
					and status = #{status}
				</if>
	       
				<if test="isIqc!=null">
					and is_iqc = #{isIqc}
				</if>
	       
				<if test="mfgDate!=null">
					and mfg_date = #{mfgDate}
				</if>
	       
				<if test="expDate!=null">
					and exp_date = #{expDate}
				</if>
	       
				<if test="validDate!=null">
					and valid_date = #{validDate}
				</if>
	       
		       <if test="cartonNo!=null and cartonNo!=''">
					and carton_no = #{cartonNo}
				</if>
				
		       <if test="batchNo!=null and batchNo!=''">
					and batch_no = #{batchNo}
				</if>
	       
	       
		       <if test="countryOfOrigin!=null and countryOfOrigin!=''">
					and country_of_origin = #{countryOfOrigin}
				</if>
	       
				<if test="invStatus!=null">
					and inv_status = #{invStatus}
				</if>
	       
	       
		       <if test="invAttr1!=null and invAttr1!=''">
					and inv_attr1 = #{invAttr1}
				</if>
	       
	       
		       <if test="invAttr2!=null and invAttr2!=''">
					and inv_attr2 = #{invAttr2}
				</if>
	       
	       
		       <if test="invAttr3!=null and invAttr3!=''">
					and inv_attr3 = #{invAttr3}
				</if>
	       
	       
		       <if test="invAttr4!=null and invAttr4!=''">
					and inv_attr4 = #{invAttr4}
				</if>
	       
	       
		       <if test="invAttr5!=null and invAttr5!=''">
					and inv_attr5 = #{invAttr5}
				</if>
	       
				<if test="createTime!=null">
					and create_time = #{createTime}
				</if>
	       
				<if test="createdId!=null">
					and created_id = #{createdId}
				</if>
	       
				<if test="lastModifyTime!=null">
					and last_modify_time = #{lastModifyTime}
				</if>
	       
				<if test="modifiedId!=null">
					and modified_id = #{modifiedId}
				</if>
	       
	       
		       <if test="uuid!=null and uuid!=''">
					and uuid = #{uuid}
				</if>
	       
				<if test="poLineId!=null">
					and po_line_id = #{poLineId}
				</if>
	       
	       
		       <if test="invType!=null and invType!=''">
					and inv_type = #{invType}
				</if>
	       
	       
		       <if test="validDateUom!=null and validDateUom!=''">
					and valid_date_uom = #{validDateUom}
				</if>
		</where>
	</sql>
	

	<select id="getCount" resultType="long">
        select count(*) from t_bi_po_line 
    </select>
    <select id="findListCountByQueryMap" resultType="long">
        select count(*) from t_bi_po_line 
		<include refid="biPoLineDynamicWhere"/>    
    </select>
    
    <select id="findListCountByParam" resultType="long">
        select count(*) from t_bi_po_line 
		<include refid="biPoLineDynamicWhere"/>    
    </select>
    
    <!--
    	分页查询已经使用Dialect进行分页,也可以不使用Dialect直接编写分页
    	因为分页查询将传 offset,pageSize,lastRows 三个参数,不同的数据库可以根于此三个参数属性应用不同的分页实现
    -->
    <select id="findListByQueryMapWithPage" resultMap="BiPoLineResult">
    	select <include refid="biPoLineColumns" />
	    from t_bi_po_line 
		<include refid="biPoLineDynamicWhere"/>
		
    </select>
    
    <select id="findListByQueryMap" resultMap="BiPoLineResult">
    	select <include refid="biPoLineColumns" />
	    from t_bi_po_line 
		<include refid="biPoLineDynamicWhere"/>
		
    </select>
    
    <select id="findListByParam" resultMap="BiPoLineResult">
    	select <include refid="biPoLineColumns" />
	    from t_bi_po_line 
		<include refid="biPoLineDynamicWhere"/>
		
    </select>
    
    <select id="query" resultMap="BiPoLineResult">
		select <include refid="biPoLineColumns" />
	    from t_bi_po_line  
		<include refid="biPoLineConditionWhereExt"/>
    </select>
    
    <select id="queryCount" resultType="long">
		select count(*) from t_bi_po_line  
		<include refid="biPoLineConditionWhereExt"/>
    </select>
	
</mapper>
