<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//ibatis.apache.org//DTD Mapper 3.0//EN"
"http://ibatis.apache.org/dtd/ibatis-3-mapper.dtd">


<mapper namespace="com.baozun.scm.primservice.whoperation.dao.poasn.WhAsnSnDao">
	<resultMap id="WhAsnSnResult" type="com.baozun.scm.primservice.whoperation.model.poasn.WhAsnSn">
	</resultMap>
	
	<!-- 用于select查询公用抽取的列 -->
	<sql id="whAsnSnColumns">
	    <![CDATA[
	        	id as id,
	        	asn_line_id as asnLineId,
	        	sku_id as skuId,
	        	sn as sn,
	        	ou_id as ouId,	        	
	        	create_time as createTime,
	        	created_id as createdId,
	        	last_modify_time as lastModifyTime,
	        	modified_id as modifiedId
	    ]]>
	</sql>
		<!-- useGeneratedKeys="true" keyProperty="xxx" for sqlserver and mysql -->
		<insert id="insert" parameterType="com.baozun.scm.primservice.whoperation.model.poasn.WhAsnSn" 
			useGeneratedKeys="true" keyProperty="id" 
		 flushCache="true">
	    <![CDATA[
	        INSERT INTO
	        t_wh_asn_sn (
	        	id,
	        	asn_line_id ,
	        	sku_id ,
	        	sn ,
	        	create_time ,
	        	created_id ,
	        	last_modify_time ,
	        	modified_id,
	        	ou_id 
	        ) VALUES (
	        	#{id,javaType=java.lang.Long,jdbcType=BIGINT} ,
	        	#{asnLineId,javaType=java.lang.Long,jdbcType=BIGINT} ,
	        	#{skuId,javaType=java.lang.Long,jdbcType=BIGINT} ,
	        	#{sn,javaType=java.lang.String,jdbcType=VARCHAR} ,
	        	#{createTime,javaType=java.util.Date,jdbcType=TIMESTAMP} ,
	        	#{createdId,javaType=java.lang.Long,jdbcType=BIGINT} ,
	        	#{lastModifyTime,javaType=java.util.Date,jdbcType=TIMESTAMP} ,
	        	#{modifiedId,javaType=java.lang.Long,jdbcType=BIGINT} ,
	        	#{ouId,javaType=java.lang.Long,jdbcType=BIGINT} 
	        )
	    ]]>

		</insert>
	    
		<update id="update" parameterType="com.baozun.scm.primservice.whoperation.model.poasn.WhAsnSn">
	    <![CDATA[
	        UPDATE t_wh_asn_sn SET
		        asn_line_id = #{asnLineId,javaType=java.lang.Long,jdbcType=BIGINT} ,
		        sku_id = #{skuId,javaType=java.lang.Long,jdbcType=BIGINT} ,
		        sn = #{sn,javaType=java.lang.String,jdbcType=VARCHAR} ,
		        ou_id = #{ouId,javaType=java.lang.Long,jdbcType=BIGINT} ,		        
		        create_time = #{createTime,javaType=java.util.Date,jdbcType=TIMESTAMP} ,
		        created_id = #{createdId,javaType=java.lang.Long,jdbcType=BIGINT} ,
		        last_modify_time = #{lastModifyTime,javaType=java.util.Date,jdbcType=TIMESTAMP} ,
		        modified_id = #{modifiedId,javaType=java.lang.Long,jdbcType=BIGINT} 
	        WHERE 
		        id = #{id} 
	    ]]>
		</update>
	   <delete id="delete" parameterType="java.lang.Long">
	    <![CDATA[
	        delete from t_wh_asn_sn where
		        id = #{id} 
	    ]]>
	    </delete> 
	    
	     <delete id="deleteByIds" parameterType="list">
	    
	        delete from t_wh_asn_sn 
	        where id in
				<foreach item="item" index="index" collection="list" open="(" separator="," close=")">
#{item}				</foreach>	
	  
	    </delete>  
	         
	    <select id="findById" parameterType="java.lang.Long" resultMap="WhAsnSnResult" flushCache="false">
			select <include refid="whAsnSnColumns" />
		    <![CDATA[
			    from t_wh_asn_sn 
		        where 
		        id = #{id} 
		    ]]>
		</select>	
		<select id="getByIds" parameterType="list"  resultMap="WhAsnSnResult" flushCache="false">
			select <include refid="whAsnSnColumns" />
			    from t_wh_asn_sn 
		        where id in
				<foreach item="item" index="index" collection="list" open="(" separator="," close=")">
#{item}				</foreach>					
		</select>	
	<sql id="whAsnSnDynamicWhere">
		<!-- ognl访问静态方法的表达式 为@class@method(args),以下为调用rapid中的Ognl.isNotEmpty()方法,还有其它方法如isNotBlank()可以使用，具体请查看Ognl类 -->
		<where>
	       
				<if test="id!=null">
					and id = #{id}
				</if>
	       
				<if test="asnLineId!=null">
					and asn_line_id = #{asnLineId}
				</if>
	       
				<if test="skuId!=null">
					and sku_id = #{skuId}
				</if>
	       
	       
		       <if test="sn!=null and sn!=''">
					and sn = #{sn}
				</if>
	       
				<if test="createTime!=null">
					and create_time = #{createTime}
				</if>
	       
				<if test="createdId!=null">
					and created_id = #{createdId}
				</if>
	       
				<if test="lastModifyTime!=null">
					and last_modify_time = #{lastModifyTime}
				</if>
	       
				<if test="modifiedId!=null">
					and modified_id = #{modifiedId}
				</if>
		</where>
	</sql>
	

	<select id="getCount" resultType="long">
        select count(*) from t_wh_asn_sn 
    </select>
    <select id="findListCountByQueryMap" resultType="long">
        select count(*) from t_wh_asn_sn 
		<include refid="whAsnSnDynamicWhere"/>    
    </select>
    
    <select id="findListCountByParam" resultType="long">
        select count(*) from t_wh_asn_sn 
		<include refid="whAsnSnDynamicWhere"/>    
    </select>
    
    <!--
    	分页查询已经使用Dialect进行分页,也可以不使用Dialect直接编写分页
    	因为分页查询将传 offset,pageSize,lastRows 三个参数,不同的数据库可以根于此三个参数属性应用不同的分页实现
    -->
    <select id="findListByQueryMapWithPage" resultMap="WhAsnSnResult">
    	select <include refid="whAsnSnColumns" />
	    from t_wh_asn_sn 
		<include refid="whAsnSnDynamicWhere"/>
		
    </select>
    
    <select id="findListByQueryMap" resultMap="WhAsnSnResult">
    	select <include refid="whAsnSnColumns" />
	    from t_wh_asn_sn 
		<include refid="whAsnSnDynamicWhere"/>
		
    </select>
    
    <select id="findListByParam" resultMap="WhAsnSnResult">
    	select <include refid="whAsnSnColumns" />
	    from t_wh_asn_sn 
		<include refid="whAsnSnDynamicWhere"/>
		
    </select>

	
</mapper>
