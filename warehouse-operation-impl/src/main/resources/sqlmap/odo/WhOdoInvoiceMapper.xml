<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//ibatis.apache.org//DTD Mapper 3.0//EN"
        "http://ibatis.apache.org/dtd/ibatis-3-mapper.dtd">

<mapper namespace="com.baozun.scm.primservice.whoperation.dao.odo.WhOdoInvoiceDao">
    <resultMap id="WhOdoInvoiceResult" type="com.baozun.scm.primservice.whoperation.model.odo.WhOdoInvoice">
    </resultMap>

    <resultMap id="WhOdoInvoicePaginationResult" type="lark.common.dao.Pagination">
        <collection property="items" javaType="ArrayList" resultMap="WhOdoInvoiceResult"/>
    </resultMap>

    <!-- 用于select查询公用抽取的列 -->
    <sql id="whOdoInvoiceColumns">
        <![CDATA[
                id as id,
                odo_id as odoId,
                invoice_code as invoiceCode,
                invoice_date as invoiceDate,
                invoice_no as invoiceNo,
                payer as payer,
                item as item,
                qty as qty,
                unit_price as unitPrice,
                amt as amt,
                memo as memo,
                payee as payee,
                drawer as drawer,
                executecount as executecount,
                company as company,
                ou_id as ouId
        ]]>
    </sql>
    <sql id="whOdoInvoiceConditionWhereExt">
        <where>
            <if test="likeEqualsMap != null">
                <foreach collection="likeEqualsMap" index="key" item="value" separator="and" open=" and ">
                    ${key} like CONCAT('%',#{value},'%')
                </foreach>
            </if>

            <if test="equalsMap != null">
                <foreach collection="equalsMap" index="key" item="value" separator="and" open=" and ">
                    ${key} = #{value}
                </foreach>
            </if>

            <if test="notEqualsMap != null">
                <foreach collection="notEqualsMap" index="key" item="value" separator="and" open=" and ">
                    ${key} != #{value}
                </foreach>
            </if>

            <if test="greateMap != null">
                <foreach collection="greateMap" index="key" item="value" separator="and" open=" and ">
                    ${key} &gt; #{value}
                </foreach>
            </if>

            <if test="greateEqualsMap != null">
                <foreach collection="greateEqualsMap" index="key" item="value" separator="and" open=" and ">
                    ${key} &gt;= #{value}
                </foreach>
            </if>

            <if test="lessMap != null">
                <foreach collection="lessMap" index="key" item="value" separator="and" open=" and ">
                    ${key} &lt; #{value}
                </foreach>
            </if>

            <if test="lessEqualsMap != null">
                <foreach collection="lessEqualsMap" index="key" item="value" separator="and" open=" and ">
                    ${key} &lt;= #{value}
                </foreach>
            </if>

            <if test="nullMap != null">
                <foreach collection="nullMap" index="key" item="value" separator="and" open=" and ">
                    ${key} is null
                </foreach>
            </if>

            <if test="notNullMap != null">
                <foreach collection="notNullMap" index="key" item="value" separator="and" open=" and ">
                    ${key} is not null
                </foreach>
            </if>

            <if test="inMap != null">
                <foreach collection="inMap" index="key" item="value" separator="and" open=" and (" close=")">
                    <foreach collection="value" item="itemin" index="index" separator="or">
                        ${key} = #{itemin}
                    </foreach>
                </foreach>
            </if>

            <if test="notInMap != null">
                <foreach collection="notInMap" index="key" item="value" separator="and" open=" and (" close=")">
                    <foreach collection="value" item="itemin" index="index" separator="and">
                        ${key} != #{itemin}
                    </foreach>
                </foreach>
            </if>
        </where>

        <if test="sortBy != null">
            <foreach collection="sortBy" item="item" separator="," open=" order by ">
                ${item.field} ${item.type}
            </foreach>
        </if>
    </sql>

    <!-- 如果有自增字段 -->

    <!-- useGeneratedKeys="true" keyProperty="xxx" for sqlserver and mysql -->
    <insert id="insert" parameterType="com.baozun.scm.primservice.whoperation.model.odo.WhOdoInvoice" flushCache="true">
        <![CDATA[
                INSERT INTO
                t_wh_odo_invoice (
                    id,
                    odo_id ,
                    invoice_code ,
                    invoice_date ,
                    invoice_no ,
                    payer ,
                    item ,
                    qty ,
                    unit_price ,
                    amt ,
                    memo ,
                    payee ,
                    drawer ,
                    executecount ,
                    company ,
                    ou_id 
                ) VALUES (
                #{id,javaType=java.lang.Long,jdbcType=BIGINT} ,
                    #{odoId,javaType=java.lang.Long,jdbcType=BIGINT} ,
                    #{invoiceCode,javaType=java.lang.String,jdbcType=VARCHAR} ,
                    #{invoiceDate,javaType=java.lang.String,jdbcType=VARCHAR} ,
                    #{invoiceNo,javaType=java.lang.String,jdbcType=VARCHAR} ,
                    #{payer,javaType=java.lang.String,jdbcType=VARCHAR} ,
                    #{item,javaType=java.lang.String,jdbcType=VARCHAR} ,
                    #{qty,javaType=java.lang.Integer,jdbcType=INTEGER} ,
                    #{unitPrice,javaType=Long,jdbcType=DECIMAL} ,
                    #{amt,javaType=Long,jdbcType=DECIMAL} ,
                    #{memo,javaType=java.lang.String,jdbcType=VARCHAR} ,
                    #{payee,javaType=java.lang.String,jdbcType=VARCHAR} ,
                    #{drawer,javaType=java.lang.String,jdbcType=VARCHAR} ,
                    #{executecount,javaType=java.lang.Integer,jdbcType=INTEGER} ,
                    #{company,javaType=java.lang.String,jdbcType=VARCHAR} ,
                    #{ouId,javaType=java.lang.Long,jdbcType=BIGINT} 
                )
            ]]>

    </insert>

    <update id="update" parameterType="com.baozun.scm.primservice.whoperation.model.odo.WhOdoInvoice">
        <![CDATA[
            UPDATE t_wh_odo_invoice SET
                odo_id = #{odoId,javaType=java.lang.Long,jdbcType=BIGINT} ,
                invoice_code = #{invoiceCode,javaType=java.lang.String,jdbcType=VARCHAR} ,
                invoice_date = #{invoiceDate,javaType=java.lang.String,jdbcType=VARCHAR} ,
                invoice_no = #{invoiceNo,javaType=java.lang.String,jdbcType=VARCHAR} ,
                payer = #{payer,javaType=java.lang.String,jdbcType=VARCHAR} ,
                item = #{item,javaType=java.lang.String,jdbcType=VARCHAR} ,
                qty = #{qty,javaType=java.lang.Integer,jdbcType=INTEGER} ,
                unit_price = #{unitPrice,javaType=Long,jdbcType=DECIMAL} ,
                amt = #{amt,javaType=Long,jdbcType=DECIMAL} ,
                memo = #{memo,javaType=java.lang.String,jdbcType=VARCHAR} ,
                payee = #{payee,javaType=java.lang.String,jdbcType=VARCHAR} ,
                drawer = #{drawer,javaType=java.lang.String,jdbcType=VARCHAR} ,
                executecount = #{executecount,javaType=java.lang.Integer,jdbcType=INTEGER} ,
                company = #{company,javaType=java.lang.String,jdbcType=VARCHAR} ,
                ou_id = #{ouId,javaType=java.lang.Long,jdbcType=BIGINT} 
            WHERE 
                id = #{id} 
        ]]>
    </update>

    <update id="batchUpdate">
        UPDATE t_wh_odo_invoice SET
        <foreach collection="batchUpdateMap" index="key" item="value" separator=",">
            ${key} = #{value}
        </foreach>
        <include refid="whOdoInvoiceConditionWhereExt"/>
    </update>

    <delete id="delete" parameterType="java.lang.Long">
        <![CDATA[
            delete from t_wh_odo_invoice where
                id = #{id} 
        ]]>
    </delete>

    <delete id="deleteByIds" parameterType="list">

        delete from t_wh_odo_invoice
        where id in
        <foreach item="item" index="index" collection="list" open="(" separator="," close=")">
            #{item}
        </foreach>

    </delete>

    <update id="batchDelete">
        delete from t_wh_odo_invoice
        <include refid="whOdoInvoiceConditionWhereExt"/>
    </update>

    <select id="findById" parameterType="java.lang.Long" resultMap="WhOdoInvoiceResult" flushCache="false">
        select
        <include refid="whOdoInvoiceColumns"/>
        <![CDATA[
                from t_wh_odo_invoice 
                where 
                id = #{id} 
            ]]>
    </select>

    <select id="getByIds" parameterType="list" resultMap="WhOdoInvoiceResult" flushCache="false">
        select
        <include refid="whOdoInvoiceColumns"/>
        from t_wh_odo_invoice
        where id in
        <foreach item="item" index="index" collection="list" open="(" separator="," close=")">
            #{item}
        </foreach>
    </select>

    <sql id="whOdoInvoiceDynamicWhere">
        <!-- ognl访问静态方法的表达式 为@class@method(args),以下为调用rapid中的Ognl.isNotEmpty()方法,还有其它方法如isNotBlank()可以使用，具体请查看Ognl类 -->
        <where>

            <if test="id!=null">
                and id = #{id}
            </if>

            <if test="odoId!=null">
                and odo_id = #{odoId}
            </if>

            <if test="invoiceCode!=null and invoiceCode!=''">
                and invoice_code = #{invoiceCode}
            </if>

            <if test="invoiceDate!=null and invoiceDate!=''">
                and invoice_date = #{invoiceDate}
            </if>

            <if test="invoiceNo!=null and invoiceNo!=''">
                and invoice_no = #{invoiceNo}
            </if>

            <if test="payer!=null and payer!=''">
                and payer = #{payer}
            </if>

            <if test="item!=null and item!=''">
                and item = #{item}
            </if>

            <if test="qty!=null">
                and qty = #{qty}
            </if>

            <if test="unitPrice!=null">
                and unit_price = #{unitPrice}
            </if>

            <if test="amt!=null">
                and amt = #{amt}
            </if>

            <if test="memo!=null and memo!=''">
                and memo = #{memo}
            </if>

            <if test="payee!=null and payee!=''">
                and payee = #{payee}
            </if>

            <if test="drawer!=null and drawer!=''">
                and drawer = #{drawer}
            </if>

            <if test="executecount!=null">
                and executecount = #{executecount}
            </if>

            <if test="company!=null and company!=''">
                and company = #{company}
            </if>

            <if test="ouId!=null">
                and ou_id = #{ouId}
            </if>
        </where>
    </sql>

    <select id="getCount" resultType="long">
        select count(*) from t_wh_odo_invoice
    </select>

    <select id="findListCountByQueryMap" resultType="long">
        select count(*) from t_wh_odo_invoice
        <include refid="whOdoInvoiceDynamicWhere"/>
    </select>

    <select id="findListCountByParam" resultType="long">
        select count(*) from t_wh_odo_invoice
        <include refid="whOdoInvoiceDynamicWhere"/>
    </select>

    <!--
        分页查询已经使用Dialect进行分页,也可以不使用Dialect直接编写分页
        因为分页查询将传 offset,pageSize,lastRows 三个参数,不同的数据库可以根于此三个参数属性应用不同的分页实现
    -->
    <select id="findListByQueryMapWithPage" resultMap="WhOdoInvoiceResult">
        select
        <include refid="whOdoInvoiceColumns"/>
        from t_wh_odo_invoice
        <include refid="whOdoInvoiceDynamicWhere"/>

    </select>

    <select id="findListByQueryMap" resultMap="WhOdoInvoiceResult">
        select
        <include refid="whOdoInvoiceColumns"/>
        from t_wh_odo_invoice
        <include refid="whOdoInvoiceDynamicWhere"/>

    </select>

    <select id="findListByParam" resultMap="WhOdoInvoiceResult">
        select
        <include refid="whOdoInvoiceColumns"/>
        from t_wh_odo_invoice
        <include refid="whOdoInvoiceDynamicWhere"/>

    </select>

    <select id="query" resultMap="WhOdoInvoiceResult">
        select
        <include refid="whOdoInvoiceColumns"/>
        from t_wh_odo_invoice
        <include refid="whOdoInvoiceConditionWhereExt"/>
    </select>

    <select id="queryCount" resultType="long">
        select count(*) from t_wh_odo_invoice
        <include refid="whOdoInvoiceConditionWhereExt"/>
    </select>

</mapper>
