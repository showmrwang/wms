<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//ibatis.apache.org//DTD Mapper 3.0//EN"
        "http://ibatis.apache.org/dtd/ibatis-3-mapper.dtd">

<mapper namespace="com.baozun.scm.primservice.whoperation.dao.odo.WhOdoDao">

    <resultMap id="WhOdoResult" type="com.baozun.scm.primservice.whoperation.model.odo.WhOdo">
    </resultMap>

    <resultMap id="WhOdoPaginationResult" type="lark.common.dao.Pagination">
        <collection property="items" javaType="ArrayList" resultMap="WhOdoResult"/>
    </resultMap>

    <!-- 用于select查询公用抽取的列 -->
    <sql id="whOdoColumns">
        <![CDATA[
                id as id,
	        	odo_code as odoCode,
	        	ext_code as extCode,
	        	ec_order_code as ecOrderCode,
	        	customer_id as customerId,
	        	store_id as storeId,
	        	odo_type as odoType,
	        	group_odo_code as groupOdoCode,
	        	original_odo_code as originalOdoCode,
	        	priority_level as priorityLevel,
	        	is_whole_order_outbound as isWholeOrderOutbound,
	        	cross_docking_symbol as crossDockingSymbol,
	        	order_type as orderType,
	        	order_time as orderTime,
	        	odo_status as odoStatus,
	        	qty as qty,
	        	current_qty as currentQty,
	        	actual_qty as actualQty,
	        	cancel_qty as cancelQty,
	        	sku_number_of_packages as skuNumberOfPackages,
	        	amt as amt,
	        	distribute_mode as distributeMode,
	        	epistatic_systems_order_type as epistaticSystemsOrderType,
	        	outbound_carton_type as outboundCartonType,
	        	include_hazardous_cargo as includeHazardousCargo,
	        	include_fragile_cargo as includeFragileCargo,
	        	is_assign_success as isAssignSuccess,
	        	assign_fail_reason as assignFailReason,
	        	is_allow_merge as isAllowMerge,
	        	is_locked as isLocked,
	        	ou_id as ouId,
	        	create_time as createTime,
	        	created_id as createdId,
	        	last_modify_time as lastModifyTime,
	        	modified_id as modifiedId,
	        	wave_code as waveCode,
	        	counter_code as counterCode,
	        	distribution_code as distributionCode
        ]]>
    </sql>
    <sql id="whOdoConditionWhereExt">
        <where>
            <if test="likeEqualsMap != null">
                <foreach collection="likeEqualsMap" index="key" item="value" separator="and" open=" and ">
                    ${key} like CONCAT('%',#{value},'%')
                </foreach>
            </if>

            <if test="equalsMap != null">
                <foreach collection="equalsMap" index="key" item="value" separator="and" open=" and ">
                    ${key} = #{value}
                </foreach>
            </if>
            <if test="notEqualsMap != null">
                <foreach collection="notEqualsMap" index="key" item="value" separator="and" open=" and ">
                    ${key} != #{value}
                </foreach>
            </if>

            <if test="greateMap != null">
                <foreach collection="greateMap" index="key" item="value" separator="and" open=" and ">
                    ${key} &gt; #{value}
                </foreach>
            </if>

            <if test="greateEqualsMap != null">
                <foreach collection="greateEqualsMap" index="key" item="value" separator="and" open=" and ">
                    ${key} &gt;= #{value}
                </foreach>
            </if>
            <if test="lessMap != null">
                <foreach collection="lessMap" index="key" item="value" separator="and" open=" and ">
                    ${key} &lt; #{value}
                </foreach>
            </if>

            <if test="lessEqualsMap != null">
                <foreach collection="lessEqualsMap" index="key" item="value" separator="and" open=" and ">
                    ${key} &lt;= #{value}
                </foreach>
            </if>
            <if test="nullMap != null">
                <foreach collection="nullMap" index="key" item="value" separator="and" open=" and ">
                    ${key} is null
                </foreach>
            </if>

            <if test="notNullMap != null">
                <foreach collection="notNullMap" index="key" item="value" separator="and" open=" and ">
                    ${key} is not null
                </foreach>
            </if>

            <if test="inMap != null">
                <foreach collection="inMap" index="key" item="value" separator="and" open=" and (" close=")">
                    <foreach collection="value" item="itemin" index="index" separator="or">
                        ${key} = #{itemin}
                    </foreach>
                </foreach>
            </if>

            <if test="notInMap != null">
                <foreach collection="notInMap" index="key" item="value" separator="and" open=" and (" close=")">
                    <foreach collection="value" item="itemin" index="index" separator="and">
                        ${key} != #{itemin}
                    </foreach>
                </foreach>
            </if>
        </where>

        <if test="sortBy != null">
            <foreach collection="sortBy" item="item" separator="," open=" order by ">
                ${item.field} ${item.type}
            </foreach>
        </if>
    </sql>

    <!-- 如果有自增字段 -->

    <!-- useGeneratedKeys="true" keyProperty="xxx" for sqlserver and mysql -->
    <insert id="insert" parameterType="com.baozun.scm.primservice.whoperation.model.odo.WhOdo" flushCache="true">
        <![CDATA[
                INSERT INTO
                t_wh_odo (
                   id,
		        	odo_code ,
		        	ext_code ,
		        	ec_order_code ,
		        	customer_id ,
		        	store_id ,
		        	odo_type ,
		        	group_odo_code ,
		        	original_odo_code ,
		        	priority_level ,
		        	is_whole_order_outbound ,
		        	cross_docking_symbol ,
		        	order_type ,
		        	order_time ,
		        	odo_status ,
		        	qty ,
		        	current_qty ,
		        	actual_qty ,
		        	cancel_qty ,
		        	sku_number_of_packages ,
		        	amt ,
		        	distribute_mode ,
		        	epistatic_systems_order_type ,
		        	outbound_carton_type ,
		        	include_hazardous_cargo ,
		        	include_fragile_cargo ,
		        	is_assign_success ,
		        	assign_fail_reason ,
		        	is_allow_merge ,
		        	is_locked ,
		        	ou_id ,
		        	create_time ,
		        	created_id ,
		        	last_modify_time ,
		        	modified_id ,
		        	wave_code,
		        	counter_code,
		        	distribution_code
                ) VALUES (
                   #{id,javaType=java.lang.Long,jdbcType=BIGINT} ,
		        	#{odoCode,javaType=java.lang.String,jdbcType=VARCHAR} ,
		        	#{extCode,javaType=java.lang.String,jdbcType=VARCHAR} ,
		        	#{ecOrderCode,javaType=java.lang.String,jdbcType=VARCHAR} ,
		        	#{customerId,javaType=java.lang.Long,jdbcType=BIGINT} ,
		        	#{storeId,javaType=java.lang.Long,jdbcType=BIGINT} ,
		        	#{odoType,javaType=java.lang.String,jdbcType=VARCHAR} ,
		        	#{groupOdoCode,javaType=java.lang.String,jdbcType=VARCHAR} ,
		        	#{originalOdoCode,javaType=java.lang.String,jdbcType=VARCHAR} ,
		        	#{priorityLevel,javaType=java.lang.Integer,jdbcType=INTEGER} ,
		        	#{isWholeOrderOutbound,javaType=java.lang.Boolean,jdbcType=BIT} ,
		        	#{crossDockingSymbol,javaType=java.lang.String,jdbcType=VARCHAR} ,
		        	#{orderType,javaType=java.lang.String,jdbcType=VARCHAR} ,
		        	#{orderTime,javaType=java.util.Date,jdbcType=TIMESTAMP} ,
		        	#{odoStatus,javaType=java.lang.String,jdbcType=VARCHAR} ,
		        	#{qty,javaType=Double,jdbcType=DECIMAL} ,
		        	#{currentQty,javaType=Double,jdbcType=DECIMAL} ,
		        	#{actualQty,javaType=Double,jdbcType=DECIMAL} ,
		        	#{cancelQty,javaType=Double,jdbcType=DECIMAL} ,
		        	#{skuNumberOfPackages,javaType=java.lang.Integer,jdbcType=INTEGER} ,
		        	#{amt,javaType=Double,jdbcType=DECIMAL} ,
		        	#{distributeMode,javaType=java.lang.String,jdbcType=VARCHAR} ,
		        	#{epistaticSystemsOrderType,javaType=java.lang.String,jdbcType=VARCHAR} ,
		        	#{outboundCartonType,javaType=java.lang.Long,jdbcType=BIGINT} ,
		        	#{includeHazardousCargo,javaType=java.lang.Boolean,jdbcType=BIT} ,
		        	#{includeFragileCargo,javaType=java.lang.Boolean,jdbcType=BIT} ,
		        	#{isAssignSuccess,javaType=java.lang.Boolean,jdbcType=BIT} ,
		        	#{assignFailReason,javaType=java.lang.String,jdbcType=VARCHAR} ,
		        	#{isAllowMerge,javaType=java.lang.Boolean,jdbcType=BIT} ,
		        	#{isLocked,javaType=java.lang.Boolean,jdbcType=BIT} ,
		        	#{ouId,javaType=java.lang.Long,jdbcType=BIGINT} ,
		        	#{createTime,javaType=java.util.Date,jdbcType=TIMESTAMP} ,
		        	#{createdId,javaType=java.lang.Long,jdbcType=BIGINT} ,
		        	#{lastModifyTime,javaType=java.util.Date,jdbcType=TIMESTAMP} ,
		        	#{modifiedId,javaType=java.lang.Long,jdbcType=BIGINT} ,
		        	#{waveCode,javaType=java.lang.String,jdbcType=VARCHAR},
		        	#{counterCode,javaType=java.lang.String,jdbcType=LONGVARCHAR},
		        	#{distributionCode,javaType=java.lang.String,jdbcType=VARCHAR} 
                )
            ]]>

    </insert>

    <update id="update" parameterType="com.baozun.scm.primservice.whoperation.model.odo.WhOdo">
        <![CDATA[
            UPDATE t_wh_odo SET
                odo_code = #{odoCode,javaType=java.lang.String,jdbcType=VARCHAR} ,
		        ext_code = #{extCode,javaType=java.lang.String,jdbcType=VARCHAR} ,
		        ec_order_code = #{ecOrderCode,javaType=java.lang.String,jdbcType=VARCHAR} ,
		        customer_id = #{customerId,javaType=java.lang.Long,jdbcType=BIGINT} ,
		        store_id = #{storeId,javaType=java.lang.Long,jdbcType=BIGINT} ,
		        odo_type = #{odoType,javaType=java.lang.String,jdbcType=VARCHAR} ,
		        group_odo_code = #{groupOdoCode,javaType=java.lang.String,jdbcType=VARCHAR} ,
		        original_odo_code = #{originalOdoCode,javaType=java.lang.String,jdbcType=VARCHAR} ,
		        priority_level = #{priorityLevel,javaType=java.lang.Integer,jdbcType=INTEGER} ,
		        is_whole_order_outbound = #{isWholeOrderOutbound,javaType=java.lang.Boolean,jdbcType=BIT} ,
		        cross_docking_symbol = #{crossDockingSymbol,javaType=java.lang.String,jdbcType=VARCHAR} ,
		        order_type = #{orderType,javaType=java.lang.String,jdbcType=VARCHAR} ,
		        order_time = #{orderTime,javaType=java.util.Date,jdbcType=TIMESTAMP} ,
		        odo_status = #{odoStatus,javaType=java.lang.String,jdbcType=VARCHAR} ,
		        qty = #{qty,javaType=Double,jdbcType=DECIMAL} ,
		        current_qty = #{currentQty,javaType=Double,jdbcType=DECIMAL} ,
		        actual_qty = #{actualQty,javaType=Double,jdbcType=DECIMAL} ,
		        cancel_qty = #{cancelQty,javaType=Double,jdbcType=DECIMAL} ,
		        sku_number_of_packages = #{skuNumberOfPackages,javaType=java.lang.Integer,jdbcType=INTEGER} ,
		        amt = #{amt,javaType=Double,jdbcType=DECIMAL} ,
		        distribute_mode = #{distributeMode,javaType=java.lang.String,jdbcType=VARCHAR} ,
		        epistatic_systems_order_type = #{epistaticSystemsOrderType,javaType=java.lang.String,jdbcType=VARCHAR} ,
		        outbound_carton_type = #{outboundCartonType,javaType=java.lang.Long,jdbcType=BIGINT} ,
		        include_hazardous_cargo = #{includeHazardousCargo,javaType=java.lang.Boolean,jdbcType=BIT} ,
		        include_fragile_cargo = #{includeFragileCargo,javaType=java.lang.Boolean,jdbcType=BIT} ,
		        is_assign_success = #{isAssignSuccess,javaType=java.lang.Boolean,jdbcType=BIT} ,
		        assign_fail_reason = #{assignFailReason,javaType=java.lang.String,jdbcType=VARCHAR} ,
		        is_allow_merge = #{isAllowMerge,javaType=java.lang.Boolean,jdbcType=BIT} ,
		        is_locked = #{isLocked,javaType=java.lang.Boolean,jdbcType=BIT} ,
		        create_time = #{createTime,javaType=java.util.Date,jdbcType=TIMESTAMP} ,
		        created_id = #{createdId,javaType=java.lang.Long,jdbcType=BIGINT} ,
		        last_modify_time = now() ,
		        modified_id = #{modifiedId,javaType=java.lang.Long,jdbcType=BIGINT} ,
		        wave_code=#{waveCode,javaType=java.lang.String,jdbcType=VARCHAR} ,
		        counter_code=#{counterCode,javaType=java.lang.String,jdbcType=LONGVARCHAR} ,
		        distribution_code=#{distributionCode,javaType=java.lang.String,jdbcType=VARCHAR}
            WHERE 
                id = #{id} 
                and ou_id = #{ouId}
                and last_modify_time = #{lastModifyTime}
        ]]>
    </update>

    <update id="batchUpdate">
        UPDATE t_wh_odo SET
        <foreach collection="batchUpdateMap" index="key" item="value" separator=",">
            ${key} = #{value}
        </foreach>
        <include refid="whOdoConditionWhereExt"/>
    </update>

    <delete id="delete" parameterType="java.lang.Long">
        <![CDATA[
            delete from t_wh_odo where
                id = #{id} 
        ]]>
    </delete>

    <delete id="deleteByIds" parameterType="list">

        delete from t_wh_odo
        where id in
        <foreach item="item" index="index" collection="list" open="(" separator="," close=")">
            #{item}
        </foreach>

    </delete>

    <update id="batchDelete">
        delete from t_wh_odo
        <include refid="whOdoConditionWhereExt"/>
    </update>

    <select id="findById" parameterType="java.lang.Long" resultMap="WhOdoResult" flushCache="false">
        select
        <include refid="whOdoColumns"/>
        <![CDATA[
                from t_wh_odo 
                where 
                id = #{id} 
            ]]>
    </select>

    <select id="getByIds" parameterType="list" resultMap="WhOdoResult" flushCache="false">
        select
        <include refid="whOdoColumns"/>
        from t_wh_odo
        where id in
        <foreach item="item" index="index" collection="list" open="(" separator="," close=")">
            #{item}
        </foreach>
    </select>

    <sql id="whOdoDynamicWhere">
        <!-- ognl访问静态方法的表达式 为@class@method(args),以下为调用rapid中的Ognl.isNotEmpty()方法,还有其它方法如isNotBlank()可以使用，具体请查看Ognl类 -->
        <where>
	       
				<if test="id!=null">
					and id = #{id}
				</if>
	       
	       
		       <if test="odoCode!=null and odoCode!=''">
					and odo_code = #{odoCode}
				</if>
	       
	       
		       <if test="extCode!=null and extCode!=''">
					and ext_code = #{extCode}
				</if>
	       
	       
		       <if test="ecOrderCode!=null and ecOrderCode!=''">
					and ec_order_code = #{ecOrderCode}
				</if>
	       
				<if test="customerId!=null">
					and customer_id = #{customerId}
				</if>
	       
				<if test="storeId!=null">
					and store_id = #{storeId}
				</if>
	       
	       
		       <if test="odoType!=null and odoType!=''">
					and odo_type = #{odoType}
				</if>
	       
	       
		       <if test="groupOdoCode!=null and groupOdoCode!=''">
					and group_odo_code = #{groupOdoCode}
				</if>
	       
	       
		       <if test="originalOdoCode!=null and originalOdoCode!=''">
					and original_odo_code = #{originalOdoCode}
				</if>
	       
				<if test="priorityLevel!=null">
					and priority_level = #{priorityLevel}
				</if>
	       
				<if test="isWholeOrderOutbound!=null">
					and is_whole_order_outbound = #{isWholeOrderOutbound}
				</if>
	       
	       
		       <if test="crossDockingSymbol!=null and crossDockingSymbol!=''">
					and cross_docking_symbol = #{crossDockingSymbol}
				</if>
	       
	       
		       <if test="orderType!=null and orderType!=''">
					and order_type = #{orderType}
				</if>
	       
				<if test="orderTime!=null">
					and order_time = #{orderTime}
				</if>
	       
	       
		       <if test="odoStatus!=null and odoStatus!=''">
					and odo_status = #{odoStatus}
				</if>
	       
				<if test="qty!=null">
					and qty = #{qty}
				</if>
	       
				<if test="currentQty!=null">
					and current_qty = #{currentQty}
				</if>
	       
				<if test="actualQty!=null">
					and actual_qty = #{actualQty}
				</if>
	       
				<if test="cancelQty!=null">
					and cancel_qty = #{cancelQty}
				</if>
	       
				<if test="skuNumberOfPackages!=null">
					and sku_number_of_packages = #{skuNumberOfPackages}
				</if>
	       
				<if test="amt!=null">
					and amt = #{amt}
				</if>
	       
	       
		       <if test="distributeMode!=null and distributeMode!=''">
					and distribute_mode = #{distributeMode}
				</if>
	       
	       
		       <if test="epistaticSystemsOrderType!=null and epistaticSystemsOrderType!=''">
					and epistatic_systems_order_type = #{epistaticSystemsOrderType}
				</if>
	       
				<if test="outboundCartonType!=null">
					and outbound_carton_type = #{outboundCartonType}
				</if>
	       
				<if test="includeHazardousCargo!=null">
					and include_hazardous_cargo = #{includeHazardousCargo}
				</if>
	       
				<if test="includeFragileCargo!=null">
					and include_fragile_cargo = #{includeFragileCargo}
				</if>
	       
				<if test="isAssignSuccess!=null">
					and is_assign_success = #{isAssignSuccess}
				</if>
	       
	       
		       <if test="assignFailReason!=null and assignFailReason!=''">
					and assign_fail_reason = #{assignFailReason}
				</if>
	       
				<if test="isAllowMerge!=null">
					and is_allow_merge = #{isAllowMerge}
				</if>
	       
				<if test="isLocked!=null">
					and is_locked = #{isLocked}
				</if>
	       
				<if test="ouId!=null">
					and ou_id = #{ouId}
				</if>
	       
				<if test="createTime!=null">
					and create_time = #{createTime}
				</if>
	       
				<if test="createdId!=null">
					and created_id = #{createdId}
				</if>
	       
				<if test="lastModifyTime!=null">
					and last_modify_time = #{lastModifyTime}
				</if>
	       
				<if test="modifiedId!=null">
					and modified_id = #{modifiedId}
				</if>
	       
		       <if test="waveCode!=null and waveCode!=''">
					and wave_code = #{waveCode}
				</if>
		</where>
    </sql>

    <select id="getCount" resultType="long">
        select count(*) from t_wh_odo
    </select>

    <select id="findListCountByQueryMap" resultType="long">
        select count(*) from t_wh_odo
        <include refid="whOdoDynamicWhere"/>
    </select>

    <select id="findListCountByParam" resultType="long">
        select count(*) from t_wh_odo
        <include refid="whOdoDynamicWhere"/>
    </select>

    <!--
        分页查询已经使用Dialect进行分页,也可以不使用Dialect直接编写分页
        因为分页查询将传 offset,pageSize,lastRows 三个参数,不同的数据库可以根于此三个参数属性应用不同的分页实现
    -->
    <select id="findListByQueryMapWithPage" resultMap="WhOdoResult">
        select
        <include refid="whOdoColumns"/>
        from t_wh_odo
        <include refid="whOdoDynamicWhere"/>

    </select>

    <select id="findListByQueryMap" resultMap="WhOdoResult">
        select
        <include refid="whOdoColumns"/>
        from t_wh_odo
        <include refid="whOdoDynamicWhere"/>

    </select>

    <select id="findListByParam" resultMap="WhOdoResult">
        select
        <include refid="whOdoColumns"/>
        from t_wh_odo
        <include refid="whOdoDynamicWhere"/>

    </select>

    <select id="query" resultMap="WhOdoResult">
        select
        <include refid="whOdoColumns"/>
        from t_wh_odo
        <include refid="whOdoConditionWhereExt"/>
    </select>

    <select id="queryCount" resultType="long">
        select count(*) from t_wh_odo
        <include refid="whOdoConditionWhereExt"/>
    </select>

</mapper>
