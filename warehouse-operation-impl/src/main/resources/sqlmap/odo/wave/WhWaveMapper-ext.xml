<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//ibatis.apache.org//DTD Mapper 3.0//EN"
"http://ibatis.apache.org/dtd/ibatis-3-mapper.dtd">


<mapper namespace="com.baozun.scm.primservice.whoperation.dao.odo.wave.WhWaveDao">
	<resultMap id="WhWaveResultExt"
		type="com.baozun.scm.primservice.whoperation.model.odo.wave.WhWave">
	</resultMap>
	
	<resultMap id="WhWaveLineResultExt" type="com.baozun.scm.primservice.whoperation.model.odo.wave.WhWaveLine">
	</resultMap>
	
	<resultMap id="WhWaveCommand"
		type="com.baozun.scm.primservice.whoperation.command.odo.wave.WaveCommand">
	</resultMap>

	<resultMap id="SoftAllocationCommand"
		type="com.baozun.scm.primservice.whoperation.command.odo.wave.SoftAllocationCommand">
	</resultMap>

	<!-- 用于select查询公用抽取的列 -->
	<sql id="whWaveColumnsExt">
	    <![CDATA[
	        	id as id,
	        	code as code,
	        	status as status,
	        	ou_id as ouId,
	        	wave_master_id as waveMasterId,
	        	phase_code as phaseCode,
	        	is_weak_allocated as isWeakAllocated,
	        	allocate_phase as allocatePhase,
	        	is_create_picking_work as isCreatePickingWork,
	        	is_create_replenished_work as isCreateReplenishedWork,
	        	start_time as startTime,
	        	finish_time as finishTime,
	        	total_odo_qty as totalOdoQty,
	        	total_odo_line_qty as totalOdoLineQty,
	        	total_amount as totalAmount,
	        	total_volume as totalVolume,
	        	total_weight as totalWeight,
	        	total_sku_qty as totalSkuQty,
	        	sku_category_qty as skuCategoryQty,
	        	exec_odo_qty as execOdoQty,
	        	exec_odo_line_qty as execOdoLineQty,
	        	outbound_carton_qty as outboundCartonQty,
	        	is_error as isError,
	        	error_count as errorCount,
	        	create_time as createTime,
	        	last_modify_time as lastModifyTime,
	        	created_id as createdId,
	        	modified_id as modifiedId,
	        	lifecycle as lifecycle,
	        	is_run_wave as isRunWave
	    ]]>
	</sql>

	<sql id="whWaveLineColumnsExt1">
	    <![CDATA[
	        	waveLine.id as id,
	        	waveLine.wave_id as waveId,
	        	waveLine.odo_line_id as odoLineId,
	        	waveLine.odo_id as odoId,
	        	waveLine.odo_code as odoCode,
	        	waveLine.odo_priority_level as odoPriorityLevel,
	        	waveLine.odo_plan_deliver_goods_time as odoPlanDeliverGoodsTime,
	        	waveLine.odo_order_time as odoOrderTime,
	        	waveLine.allocate_rule_id as allocateRuleId,
	        	waveLine.linenum as linenum,
	        	waveLine.store_id as storeId,
	        	waveLine.ext_linenum as extLinenum,
	        	waveLine.sku_id as skuId,
	        	waveLine.sku_bar_code as skuBarCode,
	        	waveLine.sku_name as skuName,
	        	waveLine.ext_sku_name as extSkuName,
	        	waveLine.qty as qty,
	        	waveLine.allocate_qty as allocateQty,
	        	waveLine.is_whole_order_outbound as isWholeOrderOutbound,
	        	waveLine.full_line_outbound as fullLineOutbound,
	        	waveLine.mfg_date as mfgDate,
	        	waveLine.exp_date as expDate,
	        	waveLine.min_exp_date as minExpDate,
	        	waveLine.max_exp_date as maxExpDate,
	        	waveLine.batch_number as batchNumber,
	        	waveLine.country_of_origin as countryOfOrigin,
	        	waveLine.inv_status as invStatus,
	        	waveLine.inv_type as invType,
	        	waveLine.inv_attr1 as invAttr1,
	        	waveLine.inv_attr2 as invAttr2,
	        	waveLine.inv_attr3 as invAttr3,
	        	waveLine.inv_attr4 as invAttr4,
	        	waveLine.inv_attr5 as invAttr5,
	        	waveLine.outbound_carton_type as outboundCartonType,
	        	waveLine.color as color,
	        	waveLine.style as style,
	        	waveLine.size as size,
	        	waveLine.ou_id as ouId,
	        	waveLine.create_time as createTime,
	        	waveLine.created_id as createdId,
	        	waveLine.last_modify_time as lastModifyTime,
	        	waveLine.modified_id as modifiedId, 
	        	waveLine.is_pallet_container as isPalletContainer,
	        	waveLine.pallet_container_qty as palleContainerQty, 
	        	waveLine.is_static_location_allocate as isStaticLocationAllocate,
	        	waveLine.static_location_ids as staticLocationIds,
	        	waveLine.area_id as areaId,
				waveLine.tray_ids as trayIds,
				waveLine.packing_case_ids as packingCaseIds
	    ]]>
	</sql>
	
	<sql id="whWaveColumnsExt2">
	    <![CDATA[
	        	wave.id as id,
	        	wave.code as code,
	        	wave.status as status,
	        	wave.ou_id as ouId,
	        	wave.wave_master_id as waveMasterId,
	        	wave.phase_code as phaseCode,
	        	wave.is_weak_allocated as isWeakAllocated,
	        	wave.allocate_phase as allocatePhase,
	        	wave.start_time as startTime,
	        	wave.finish_time as finishTime,
	        	wave.total_odo_qty as totalOdoQty,
	        	wave.total_odo_line_qty as totalOdoLineQty,
	        	wave.total_amount as totalAmount,
	        	wave.total_volume as totalVolume,
	        	wave.total_weight as totalWeight,
	        	wave.total_sku_qty as totalSkuQty,
	        	wave.sku_category_qty as skuCategoryQty,
	        	wave.exec_odo_qty as execOdoQty,
	        	wave.exec_odo_line_qty as execOdoLineQty,
	        	wave.outbound_carton_qty as outboundCartonQty,
	        	wave.is_error as isError,
	        	wave.error_count as errorCount,
	        	wave.create_time as createTime,
	        	wave.last_modify_time as lastModifyTime,
	        	wave.created_id as createdId,
	        	wave.modified_id as modifiedId,
	        	wave.lifecycle as lifecycle,
	        	wave.is_run_wave as isRunWave,
	        	template.is_outbound_carton_type_merge as needOutboundCartonType,
	    		template.is_order_type_merge as needEpistaticSystemsOrderType,
	    		template.is_store_merge as needStore,
	    		template.is_deliver_goods_time_merge as needDeliverGoodsTime
	    ]]>
	</sql>

	<sql id="whWaveDynamicWhereExt">
		<!-- ognl访问静态方法的表达式 为@class@method(args),以下为调用rapid中的Ognl.isNotEmpty()方法,还有其它方法如isNotBlank()可以使用，具体请查看Ognl类 -->
		<where>

			<if test="id!=null">
				and id = #{id}
			</if>


			<if test="code!=null and code!=''">
				and code = #{code}
			</if>

			<if test="status!=null">
				and status = #{status}
			</if>

			<if test="ouId!=null">
				and ou_id = #{ouId}
			</if>

			<if test="waveMasterId!=null">
				and wave_master_id = #{waveMasterId}
			</if>


			<if test="phaseCode!=null and phaseCode!=''">
				and phase_code = #{phaseCode}
			</if>

			<if test="isWeakAllocated!=null">
				and is_weak_allocated = #{isWeakAllocated}
			</if>

			<if test="allocatePhase!=null">
				and allocate_phase = #{allocatePhase}
			</if>

			<if test="startTime!=null">
				and start_time = #{startTime}
			</if>

			<if test="finishTime!=null">
				and finish_time = #{finishTime}
			</if>

			<if test="totalOdoQty!=null">
				and total_odo_qty = #{totalOdoQty}
			</if>

			<if test="totalOdoLineQty!=null">
				and total_odo_line_qty = #{totalOdoLineQty}
			</if>

			<if test="totalAmount!=null">
				and total_amount = #{totalAmount}
			</if>

			<if test="totalVolume!=null">
				and total_volume = #{totalVolume}
			</if>

			<if test="totalWeight!=null">
				and total_weight = #{totalWeight}
			</if>

			<if test="totalSkuQty!=null">
				and total_sku_qty = #{totalSkuQty}
			</if>

			<if test="skuCategoryQty!=null">
				and sku_category_qty = #{skuCategoryQty}
			</if>

			<if test="execOdoQty!=null">
				and exec_odo_qty = #{execOdoQty}
			</if>

			<if test="execOdoLineQty!=null">
				and exec_odo_line_qty = #{execOdoLineQty}
			</if>

			<if test="outboundCartonQty!=null">
				and outbound_carton_qty = #{outboundCartonQty}
			</if>

			<if test="isError!=null">
				and is_error = #{isError}
			</if>

			<if test="errorCount!=null">
				and error_count = #{errorCount}
			</if>

			<if test="createTime!=null">
				and create_time = #{createTime}
			</if>

			<if test="lastModifyTime!=null">
				and last_modify_time = #{lastModifyTime}
			</if>

			<if test="createdId!=null">
				and created_id = #{createdId}
			</if>

			<if test="modifiedId!=null">
				and modified_id = #{modifiedId}
			</if>

			<if test="lifecycle!=null">
				and lifecycle = #{lifecycle}
			</if>
			
			<if test="isRunWave!=null">
				and is_run_wave = #{isRunWave}
			</if>
		</where>
	</sql>


	<update id="updateByVersion"
		parameterType="com.baozun.scm.primservice.whoperation.model.odo.wave.WhWave">
		    <![CDATA[
		        UPDATE t_wh_wave SET
			        code = #{code,javaType=java.lang.String,jdbcType=VARCHAR} ,
			        status = #{status,javaType=java.lang.Integer,jdbcType=INTEGER} ,
			        wave_master_id = #{waveMasterId,javaType=java.lang.Long,jdbcType=BIGINT} ,
			        phase_code = #{phaseCode,javaType=java.lang.String,jdbcType=VARCHAR} ,
			        is_weak_allocated = #{isWeakAllocated,javaType=java.lang.Boolean,jdbcType=BIT} ,
			        allocate_phase = #{allocatePhase,javaType=java.lang.Integer,jdbcType=INTEGER} ,
			        is_create_picking_work = #{isCreatePickingWork,javaType=java.lang.Boolean,jdbcType=BIT} ,
	        		is_create_replenished_work = #{isCreateReplenishedWork,javaType=java.lang.Boolean,jdbcType=BIT} ,
			        start_time = #{startTime,javaType=java.util.Date,jdbcType=TIMESTAMP} ,
			        finish_time = #{finishTime,javaType=java.util.Date,jdbcType=TIMESTAMP} ,
			        total_odo_qty = #{totalOdoQty,javaType=java.lang.Integer,jdbcType=INTEGER} ,
			        total_odo_line_qty = #{totalOdoLineQty,javaType=java.lang.Integer,jdbcType=INTEGER} ,
			        total_amount = #{totalAmount,javaType=Double,jdbcType=DECIMAL} ,
			        total_volume = #{totalVolume,javaType=Double,jdbcType=DECIMAL} ,
			        total_weight = #{totalWeight,javaType=Double,jdbcType=DECIMAL} ,
			        total_sku_qty = #{totalSkuQty,javaType=Double,jdbcType=DECIMAL} ,
			        sku_category_qty = #{skuCategoryQty,javaType=java.lang.Integer,jdbcType=INTEGER} ,
			        exec_odo_qty = #{execOdoQty,javaType=java.lang.Integer,jdbcType=INTEGER} ,
			        exec_odo_line_qty = #{execOdoLineQty,javaType=java.lang.Integer,jdbcType=INTEGER} ,
			        outbound_carton_qty = #{outboundCartonQty,javaType=java.lang.Integer,jdbcType=INTEGER} ,
			        is_error = #{isError,javaType=java.lang.Boolean,jdbcType=BIT} ,
			        error_count = #{errorCount,javaType=java.lang.Integer,jdbcType=INTEGER} ,
			        create_time = #{createTime,javaType=java.util.Date,jdbcType=TIMESTAMP} ,
			        last_modify_time = now() ,
			        created_id = #{createdId,javaType=java.lang.Long,jdbcType=BIGINT} ,
			        modified_id = #{modifiedId,javaType=java.lang.Long,jdbcType=BIGINT} ,
			        lifecycle = #{lifecycle,javaType=java.lang.Integer,jdbcType=INTEGER} ,
			        is_run_wave=#{isRunWave,javaType=java.lang.Boolean,jdbcType=BIT} 
		        WHERE 
			        id = #{id} 
			        and ou_id = #{ouId}
			        and last_modify_time	<=  #{lastModifyTime}    
		    ]]>
	</update>


	<select id="findSoftAllocationWhWaveLine" resultMap="WhWaveLineResultExt">
		select
		<include refid="whWaveLineColumnsExt1" />
		from t_wh_wave wave,t_wh_wave_line waveLine
		where
		waveLine.wave_id=wave.id
		and waveLine.ou_id=wave.ou_id
		and wave.status = #{waveStatus}
		and wave.lifecycle = #{lifecycle}
		and wave.id = #{waveId}
		and wave.ou_id = #{ouId}
		order by
		waveLine.odo_priority_level,waveLine.odo_plan_deliver_goods_time,
		waveLine.odo_order_time desc,waveLine.qty, waveLine.odo_id asc
	</select>


	<select id="getSkuInvTotalQty" resultMap="SoftAllocationCommand">
		SELECT
			waveline.ouId,
			waveline.skuId,
			waveline.qtys,
			sum(IFNULL(inv.on_hand_qty, 0)) AS sQtys
		FROM
		(
			SELECT
			wave.ou_id AS ouId,
			waveLine.sku_id skuId,
			sum(IFNULL(waveLine.qty, 0)) qtys
			FROM
			t_wh_wave_line waveLine
			LEFT JOIN t_wh_wave wave ON waveLine.wave_id = wave.id
			WHERE
			wave.ou_id = waveLine.ou_id
			AND wave.id = #{waveId}
			AND wave.ou_id = #{ouId}
			-- AND wave. STATUS = 1
			GROUP BY
			waveLine.sku_id
		) waveline
		LEFT JOIN t_wh_sku_inventory inv ON (
			waveline.skuId = inv.sku_id
			AND waveline.ouId = inv.ou_id
		)
		LEFT JOIN t_wh_location loc ON (
			inv.location_id = loc.id
			AND inv.ou_id = loc.ou_id
		)
		WHERE
			(loc.is_temporary_location != 1 or inv.location_id is null)
			AND inv.on_hand_qty > 0.0
			AND inv.occupation_code IS NULL
		GROUP BY
			waveline.skuId
	</select>

	<select id="getSkuInvOccupiedQty" resultMap="SoftAllocationCommand">
		SELECT
			waveline.ouId,
			waveline.skuId,
			waveline.qtys,
			sum(IFNULL(- occupyWaveline.qty, 0)) AS sQtys
		FROM
		(
			SELECT
			wave.ou_id AS ouId,
			waveLine.sku_id skuId,
			sum(IFNULL(waveLine.qty, 0)) qtys
			FROM
			t_wh_wave_line waveLine
			LEFT JOIN t_wh_wave wave ON waveLine.wave_id = wave.id
			WHERE
			wave.ou_id = waveLine.ou_id
			-- AND wave.id = 1
			AND wave.id = #{waveId}
			AND wave.ou_id = #{ouId}
			GROUP BY
			waveLine.sku_id
		) waveline
		LEFT JOIN t_wh_wave_line occupyWaveline ON (
			waveline.skuId = occupyWaveline.sku_id
			AND waveline.ouId = occupyWaveline.ou_id
		)
		LEFT JOIN t_wh_wave occupyWave ON (
			waveline.ouId = occupyWave.ou_id
			AND occupyWave.id = occupyWaveline.wave_id
		)
		WHERE
			-- occupyWave. STATUS = 5
			1 = 1
			AND ((
			-- 软分配阶段
				occupyWave.phase_code = 'WEAK_ALLOCATED'
				AND occupyWave.is_weak_allocated = 1
			)
			OR (
			-- 合并订单
				occupyWave.phase_code = 'MERGE_ODO'
				AND occupyWave.is_weak_allocated = 1
			)
			OR(
			-- 硬分配匹配规则阶段
				occupyWave.phase_code = 'ALLOCATED'
				AND occupyWave.allocate_phase = 0
			)
			)
		GROUP BY
			waveline.skuId
	</select>
	
	 <select id="findListByQueryMapWithPageExt" resultMap="WhWaveCommand" parameterType="com.baozun.scm.primservice.whoperation.command.odo.wave.WaveCommand">
    	SELECT
    		wave.id as id,
			wave.code as code,
			wave.status as status,
			user1.user_name as createName,
			wave.create_time as createTime,
			waveMaster.name as masterName,
			wave.start_time as startTime,
			wave.finish_time as finishTime,
			wave.phase_code as phaseCode,
			wave.total_odo_qty as totalOdoQty,
			wave.total_odo_line_qty as totalOdoLineQty,
			wave.total_amount as totalAmount,
			wave.total_volume as totalVolume,
			wave.total_weight as totalWeight,
			wave.exec_odo_qty as execOdoQty,
			wave.exec_odo_line_qty as execOdoLineQty,
			wave.outbound_carton_qty as outboundCartonQty,
			wave.sku_category_qty as skuCategoryQty,
			wave.total_sku_qty as totalSkuQty
		
		from t_wh_wave wave
		inner join t_wh_wave_master waveMaster on waveMaster.id=wave.wave_master_id
		left join oper_user user1 on user1.id=wave.created_id
		<where>
	        <if test="storeList!=null">
	         and not exists(select 1 from t_wh_wave_line waveline where waveline.wave_id=wave.id and wave_line.store_id not in
	          <foreach collection="storeList" item="sid" open="(" separator="," close=")">
	         		#{sid}
             	</foreach>
	         )
	        </if>
            <if test="storeList==null">
                  and 1 &gt;1
	        </if>
			<if test="ouId!=null">
				 and wave.ou_id =#{ouId} 
			</if>
			<if test="searchWaveCode!=null and searchWaveCode!=''">
				 and wave.code like #{searchWaveCode} 
			</if>
			<if test="searchWaveMasterName!=null and searchWaveMasterName!=''">
				and waveMaster.name like #{searchWaveMasterName} 
			</if>
			<if test="searchWaveMaseterCode!=null and searchWaveMaseterCode!=''">
				and waveMaster.code like #{searchWaveMaseterCode} 
			</if>
			<if test="searchWaveStatus!=null">
				and wave.status in
				<foreach collection="searchWaveStatus" item="s" open="("
					separator="," close=")">
					#{s}
				</foreach>
			</if>
			<if test="searchWavePhase!=null">
				and wave.phase_code in
				<foreach collection="searchWavePhase" item="c" open="("
					separator="," close=")">
					#{c}
				</foreach>
			</if>
			<if test="searchCreateName!=null and searchCreateName!=''">
				and user1.user_name like #{searchCreateName} 
			</if>
			<if test="searchCreateTimeStart!=null and searchCreateTimeStart!='' ">
				and
				DATE_FORMAT(wave.create_time,'%Y-%m-%d')&gt;=#{searchCreateTimeStart}
			</if>
			<if test="searchCreateTimeEnd!=null and searchCreateTimeEnd!=''">
				and
				DATE_FORMAT(wave.create_time,'%Y-%m-%d')&lt;=#{searchCreateTimeEnd}
			</if>
		</where>
		
    </select>
    
      <select id="findListCountByQueryMapExt" resultType="long" parameterType="com.baozun.scm.primservice.whoperation.command.odo.wave.WaveCommand">
       SELECT
			count(*)
		
		from t_wh_wave wave
		inner join t_wh_wave_master waveMaster on waveMaster.id=wave.wave_master_id
		left join oper_user user1 on user1.id=wave.created_id
		<where>
			<if test="ouId!=null">
				 and wave.ou_id =#{ouId} 
			</if>
			<if test="searchWaveCode!=null and searchWaveCode!=''">
				 and wave.code like #{searchWaveCode} 
			</if>
			<if test="searchWaveMasterName!=null and searchWaveMasterName!=''">
				and waveMaster.name like #{searchWaveMasterName} 
			</if>
			<if test="searchWaveMaseterCode!=null and searchWaveMaseterCode!=''">
				and waveMaster.code like #{searchWaveMaseterCode} 
			</if>
			<if test="searchWaveStatus!=null">
				and wave.status in
				<foreach collection="searchWaveStatus" item="s" open="("
					separator="," close=")">
					#{s}
				</foreach>
			</if>
			<if test="searchWavePhase!=null">
				and wave.phase_code in
				<foreach collection="searchWavePhase" item="c" open="("
					separator="," close=")">
					#{c}
				</foreach>
			</if>
			<if test="searchCreateName!=null and searchCreateName!=''">
				and user1.user_name like #{searchCreateName} 
			</if>
			<if test="searchCreateTimeStart!=null and searchCreateTimeStart!='' ">
				and
				DATE_FORMAT(wave.create_time,'%Y-%m-%d')&gt;=#{searchCreateTimeStart}
			</if>
			<if test="searchCreateTimeEnd!=null and searchCreateTimeEnd!=''">
				and
				DATE_FORMAT(wave.create_time,'%Y-%m-%d')&lt;=#{searchCreateTimeEnd}
			</if>
		</where>    
    </select>
	<delete id="deleteByIdOuId" parameterType="map">
	    <![CDATA[
	        delete from t_wh_wave where
		        id = #{id} and ou_id=#{ouId}
	    ]]>
	    </delete> 
    
	<select id="findWaveIdsByParam" resultType="long">
    	select id
	    from t_wh_wave 
		<include refid="whWaveDynamicWhere"/>
    </select>
    
    <select id="findWaveByIdAndOuId" resultMap="WhWaveCommand">
    	select 
    		<include refid="whWaveColumnsExt2" />
	    from t_wh_wave wave 
		    left join t_wh_wave_master master on wave.wave_master_id = master.id
		    left join t_wh_wave_template template on master.wave_template_id = template.id
	    where 
			wave.id = #{waveId} and wave.ou_id = #{ouId}
    </select>
    
    <select id="findWaveExtByIdAndOuId" resultMap="WhWaveResultExt">
    	select 
    		<include refid="whWaveColumnsExt" />
	    from t_wh_wave wave 
	    where 
			wave.id = #{waveId} and wave.ou_id = #{ouId}
    </select>
    
    <select id="findWaveExtByIdAndOuIdAndLifecycle" resultMap="WhWaveResultExt">
    	select 
    		<include refid="whWaveColumnsExt" />
	    from t_wh_wave wave 
	    where 
			wave.id = #{waveId} 
		and wave.ou_id = #{ouId} 
		and wave.lifecycle = #{lifecycle}
    </select>
    
    <select id="getNeedAllocationRuleWhWave" parameterType="map" resultType="long">
		SELECT w.id 
		FROM t_wh_wave w 
		WHERE w.phase_code = 'ALLOCATED' 
		AND w.allocate_phase = #{allocatePhase}
		AND w.ou_id = #{ouId}
		AND w.is_run_wave = 1
	</select>
	
	<update id="updateWhWaveAllocatePhase" parameterType="map">
		update 
			t_wh_wave w 
		set 
			w.allocate_phase = #{allocatePhase} 
		where 
			w.ou_id = #{ouId} 
			and w.id in
			<foreach collection="waveIdList" item="id" open="(" separator="," close=")">
				#{id}
			</foreach> 
	</update>
	
	<select id="findOdoContainsSkuId" resultType="long">
		select 
			line.odo_id 
		from 
			t_wh_wave wave,t_wh_wave_line line
		where  
			wave.id = line.wave_id
			and line.sku_id in 
			<foreach collection="skuIds" item="skuId" open="(" separator="," close=")">
				#{skuId}
			</foreach>
			and wave.id = #{waveId}
			and wave.ou_id = #{ouId}
		group by line.odo_id;
	</select>
	
	<select id="getWhWaveListByPhaseCode" parameterType="map" resultType="long">
		SELECT w.id 
		FROM t_wh_wave w 
		WHERE w.phase_code = #{phaseCode} 
		AND w.ou_id = #{ouId}
		and w.is_run_wave = 1
	</select>
	
	<select id="getNeedPickingWorkWhWave" parameterType="map" resultType="long">
		select  
			w.id 
		from 
			t_wh_wave w 
		where 
			w.status = #{status}
			and w.phase_code = #{phaseCode} 
		    and w.ou_id = #{ouId}
	</select>
	
</mapper>
