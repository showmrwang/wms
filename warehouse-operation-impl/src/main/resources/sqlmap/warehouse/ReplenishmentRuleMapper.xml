<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//ibatis.apache.org//DTD Mapper 3.0//EN"
        "http://ibatis.apache.org/dtd/ibatis-3-mapper.dtd">


<mapper namespace="com.baozun.scm.primservice.whoperation.dao.warehouse.ReplenishmentRuleDao">
    <resultMap id="ReplenishmentRuleResult" type="com.baozun.scm.primservice.whoperation.model.warehouse.ReplenishmentRule">
    </resultMap>
    <resultMap id="ReplenishmentRulePaginationResult" type="lark.common.dao.Pagination">
        <collection property="items" javaType="ArrayList" resultMap="ReplenishmentRuleResult"/>
    </resultMap>

    <!-- 用于select查询公用抽取的列 -->
    <sql id="replenishmentRuleColumns">
        <![CDATA[
                id as id,
                replenishment_rule_name as replenishmentRuleName,
                replenishment_rule_code as replenishmentRuleCode,
                location_rule as locationRule,
                location_rule_sql as locationRuleSql,
                sku_rule as skuRule,
                sku_rule_sql as skuRuleSql,
                order_replenish as orderReplenish,
                real_time_replenish as realTimeReplenish,
                wave_replenish as waveReplenish,
                ou_id as ouId,
                priority as priority,
                description as description,
                create_time as createTime,
                created_id as createdId,
                last_modify_time as lastModifyTime,
                modified_id as modifiedId,
                lifecycle as lifecycle
        ]]>
    </sql>
    <sql id="replenishmentRuleConditionWhereExt">
        <where>
            <if test="likeEqualsMap != null">
                <foreach collection="likeEqualsMap" index="key" item="value" separator="and" open=" and ">
                    ${key} like CONCAT('%',#{value},'%')
                </foreach>
            </if>
            <if test="equalsMap != null">
                <foreach collection="equalsMap" index="key" item="value" separator="and" open=" and ">
                    ${key} = #{value}
                </foreach>
            </if>
            <if test="notEqualsMap != null">
                <foreach collection="notEqualsMap" index="key" item="value" separator="and" open=" and ">
                    ${key} != #{value}
                </foreach>
            </if>
            <if test="greateMap != null">
                <foreach collection="greateMap" index="key" item="value" separator="and" open=" and ">
                    ${key} &gt; #{value}
                </foreach>
            </if>
            <if test="greateEqualsMap != null">
                <foreach collection="greateEqualsMap" index="key" item="value" separator="and" open=" and ">
                    ${key} &gt;= #{value}
                </foreach>
            </if>
            <if test="lessMap != null">
                <foreach collection="lessMap" index="key" item="value" separator="and" open=" and ">
                    ${key} &lt; #{value}
                </foreach>
            </if>
            <if test="lessEqualsMap != null">
                <foreach collection="lessEqualsMap" index="key" item="value" separator="and" open=" and ">
                    ${key} &lt;= #{value}
                </foreach>
            </if>
            <if test="nullMap != null">
                <foreach collection="nullMap" index="key" item="value" separator="and" open=" and ">
                    ${key} is null
                </foreach>
            </if>
            <if test="notNullMap != null">
                <foreach collection="notNullMap" index="key" item="value" separator="and" open=" and ">
                    ${key} is not null
                </foreach>
            </if>
            <if test="inMap != null">
                <foreach collection="inMap" index="key" item="value" separator="and" open=" and (" close=")">
                    <foreach collection="value" item="itemin" index="index" separator="or">
                        ${key} = #{itemin}
                    </foreach>
                </foreach>
            </if>
            <if test="notInMap != null">
                <foreach collection="notInMap" index="key" item="value" separator="and" open=" and (" close=")">
                    <foreach collection="value" item="itemin" index="index" separator="and">
                        ${key} != #{itemin}
                    </foreach>
                </foreach>
            </if>
        </where>
        <if test="sortBy != null">
            <foreach collection="sortBy" item="item" separator="," open=" order by ">
                ${item.field} ${item.type}
            </foreach>
        </if>
    </sql>

    <!-- 如果有自增字段 -->

    <!-- useGeneratedKeys="true" keyProperty="xxx" for sqlserver and mysql -->
    <insert id="insert" parameterType="com.baozun.scm.primservice.whoperation.model.warehouse.ReplenishmentRule"

            flushCache="true">
        <![CDATA[
                INSERT INTO
                t_wh_replenishment_rule (
                id,
                    replenishment_rule_name ,
                    replenishment_rule_code ,
                    location_rule ,
                    location_rule_sql ,
                    sku_rule ,
                    sku_rule_sql ,
                    order_replenish ,
                    real_time_replenish ,
                    wave_replenish ,
                    ou_id ,
                    priority ,
                    description ,
                    create_time ,
                    created_id ,
                    last_modify_time ,
                    modified_id ,
                    lifecycle 
                ) VALUES (
                #{id,javaType=java.lang.Long,jdbcType=BIGINT} ,
                    #{replenishmentRuleName,javaType=java.lang.String,jdbcType=VARCHAR} ,
                    #{replenishmentRuleCode,javaType=java.lang.String,jdbcType=VARCHAR} ,
                    #{locationRule,javaType=java.lang.String,jdbcType=VARCHAR} ,
                    #{locationRuleSql,javaType=java.lang.String,jdbcType=LONGVARCHAR} ,
                    #{skuRule,javaType=java.lang.String,jdbcType=VARCHAR} ,
                    #{skuRuleSql,javaType=java.lang.String,jdbcType=LONGVARCHAR} ,
                    #{orderReplenish,javaType=java.lang.Boolean,jdbcType=BIT} ,
                    #{realTimeReplenish,javaType=java.lang.Boolean,jdbcType=BIT} ,
                    #{waveReplenish,javaType=java.lang.Boolean,jdbcType=BIT} ,
                    #{ouId,javaType=java.lang.Long,jdbcType=BIGINT} ,
                    #{priority,javaType=java.lang.Integer,jdbcType=INTEGER} ,
                    #{description,javaType=java.lang.String,jdbcType=VARCHAR} ,
                    #{createTime,javaType=java.util.Date,jdbcType=TIMESTAMP} ,
                    #{createdId,javaType=java.lang.Long,jdbcType=BIGINT} ,
                    #{lastModifyTime,javaType=java.util.Date,jdbcType=TIMESTAMP} ,
                    #{modifiedId,javaType=java.lang.Long,jdbcType=BIGINT} ,
                    #{lifecycle,javaType=java.lang.Integer,jdbcType=INTEGER} 
                )
            ]]>

    </insert>


    <update id="update" parameterType="com.baozun.scm.primservice.whoperation.model.warehouse.ReplenishmentRule">
        <![CDATA[
            UPDATE t_wh_replenishment_rule SET
                replenishment_rule_name = #{replenishmentRuleName,javaType=java.lang.String,jdbcType=VARCHAR} ,
                replenishment_rule_code = #{replenishmentRuleCode,javaType=java.lang.String,jdbcType=VARCHAR} ,
                location_rule = #{locationRule,javaType=java.lang.String,jdbcType=VARCHAR} ,
                location_rule_sql = #{locationRuleSql,javaType=java.lang.String,jdbcType=LONGVARCHAR} ,
                sku_rule = #{skuRule,javaType=java.lang.String,jdbcType=VARCHAR} ,
                sku_rule_sql = #{skuRuleSql,javaType=java.lang.String,jdbcType=LONGVARCHAR} ,
                order_replenish = #{orderReplenish,javaType=java.lang.Boolean,jdbcType=BIT} ,
                real_time_replenish = #{realTimeReplenish,javaType=java.lang.Boolean,jdbcType=BIT} ,
                wave_replenish = #{waveReplenish,javaType=java.lang.Boolean,jdbcType=BIT} ,
                ou_id = #{ouId,javaType=java.lang.Long,jdbcType=BIGINT} ,
                priority = #{priority,javaType=java.lang.Integer,jdbcType=INTEGER} ,
                description = #{description,javaType=java.lang.String,jdbcType=VARCHAR} ,
                create_time = #{createTime,javaType=java.util.Date,jdbcType=TIMESTAMP} ,
                created_id = #{createdId,javaType=java.lang.Long,jdbcType=BIGINT} ,
                last_modify_time = #{lastModifyTime,javaType=java.util.Date,jdbcType=TIMESTAMP} ,
                modified_id = #{modifiedId,javaType=java.lang.Long,jdbcType=BIGINT} ,
                lifecycle = #{lifecycle,javaType=java.lang.Integer,jdbcType=INTEGER} 
            WHERE 
                id = #{id} 
        ]]>
    </update>
    <update id="batchUpdate">
        UPDATE t_wh_replenishment_rule SET
        <foreach collection="batchUpdateMap" index="key" item="value" separator=",">
            ${key} = #{value}
        </foreach>
        <include refid="replenishmentRuleConditionWhereExt"/>
    </update>

    <delete id="delete" parameterType="java.lang.Long">
        <![CDATA[
            delete from t_wh_replenishment_rule where
                id = #{id} 
        ]]>
    </delete>

    <delete id="deleteByIds" parameterType="list">

        delete from t_wh_replenishment_rule
        where id in
        <foreach item="item" index="index" collection="list" open="(" separator="," close=")">
            #{item}
        </foreach>

    </delete>
    <update id="batchDelete">
        delete from t_wh_replenishment_rule
        <include refid="replenishmentRuleConditionWhereExt"/>
    </update>

    <select id="findById" parameterType="java.lang.Long" resultMap="ReplenishmentRuleResult" flushCache="false">
        select
        <include refid="replenishmentRuleColumns"/>
        <![CDATA[
                from t_wh_replenishment_rule 
                where 
                id = #{id} 
            ]]>
    </select>
    <select id="getByIds" parameterType="list" resultMap="ReplenishmentRuleResult" flushCache="false">
        select
        <include refid="replenishmentRuleColumns"/>
        from t_wh_replenishment_rule
        where id in
        <foreach item="item" index="index" collection="list" open="(" separator="," close=")">
            #{item}
        </foreach>
    </select>
    <sql id="replenishmentRuleDynamicWhere">
        <!-- ognl访问静态方法的表达式 为@class@method(args),以下为调用rapid中的Ognl.isNotEmpty()方法,还有其它方法如isNotBlank()可以使用，具体请查看Ognl类 -->
        <where>

            <if test="id!=null">
                and id = #{id}
            </if>


            <if test="replenishmentRuleName!=null and replenishmentRuleName!=''">
                and replenishment_rule_name = #{replenishmentRuleName}
            </if>


            <if test="replenishmentRuleCode!=null and replenishmentRuleCode!=''">
                and replenishment_rule_code = #{replenishmentRuleCode}
            </if>


            <if test="locationRule!=null and locationRule!=''">
                and location_rule = #{locationRule}
            </if>


            <if test="locationRuleSql!=null and locationRuleSql!=''">
                and location_rule_sql = #{locationRuleSql}
            </if>


            <if test="skuRule!=null and skuRule!=''">
                and sku_rule = #{skuRule}
            </if>


            <if test="skuRuleSql!=null and skuRuleSql!=''">
                and sku_rule_sql = #{skuRuleSql}
            </if>

            <if test="orderReplenish!=null">
                and order_replenish = #{orderReplenish}
            </if>

            <if test="realTimeReplenish!=null">
                and real_time_replenish = #{realTimeReplenish}
            </if>

            <if test="waveReplenish!=null">
                and wave_replenish = #{waveReplenish}
            </if>

            <if test="ouId!=null">
                and ou_id = #{ouId}
            </if>

            <if test="priority!=null">
                and priority = #{priority}
            </if>


            <if test="description!=null and description!=''">
                and description = #{description}
            </if>

            <if test="createTime!=null">
                and create_time = #{createTime}
            </if>

            <if test="createdId!=null">
                and created_id = #{createdId}
            </if>

            <if test="lastModifyTime!=null">
                and last_modify_time = #{lastModifyTime}
            </if>

            <if test="modifiedId!=null">
                and modified_id = #{modifiedId}
            </if>

            <if test="lifecycle!=null">
                and lifecycle = #{lifecycle}
            </if>
        </where>
    </sql>


    <select id="getCount" resultType="long">
        select count(*) from t_wh_replenishment_rule
    </select>
    <select id="findListCountByQueryMap" resultType="long">
        select count(*) from t_wh_replenishment_rule
        <include refid="replenishmentRuleDynamicWhere"/>
    </select>

    <select id="findListCountByParam" resultType="long">
        select count(*) from t_wh_replenishment_rule
        <include refid="replenishmentRuleDynamicWhere"/>
    </select>

    <!--
        分页查询已经使用Dialect进行分页,也可以不使用Dialect直接编写分页
        因为分页查询将传 offset,pageSize,lastRows 三个参数,不同的数据库可以根于此三个参数属性应用不同的分页实现
    -->
    <select id="findListByQueryMapWithPage" resultMap="ReplenishmentRuleResult">
        select
        <include refid="replenishmentRuleColumns"/>
        from t_wh_replenishment_rule
        <include refid="replenishmentRuleDynamicWhere"/>

    </select>

    <select id="findListByQueryMap" resultMap="ReplenishmentRuleResult">
        select
        <include refid="replenishmentRuleColumns"/>
        from t_wh_replenishment_rule
        <include refid="replenishmentRuleDynamicWhere"/>

    </select>

    <select id="findListByParam" resultMap="ReplenishmentRuleResult">
        select
        <include refid="replenishmentRuleColumns"/>
        from t_wh_replenishment_rule
        <include refid="replenishmentRuleDynamicWhere"/>

    </select>

    <select id="query" resultMap="ReplenishmentRuleResult">
        select
        <include refid="replenishmentRuleColumns"/>
        from t_wh_replenishment_rule
        <include refid="replenishmentRuleConditionWhereExt"/>
    </select>

    <select id="queryCount" resultType="long">
        select count(*) from t_wh_replenishment_rule
        <include refid="replenishmentRuleConditionWhereExt"/>
    </select>


</mapper>
