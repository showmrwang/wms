<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//ibatis.apache.org//DTD Mapper 3.0//EN"
        "http://ibatis.apache.org/dtd/ibatis-3-mapper.dtd">

<mapper namespace="com.baozun.scm.primservice.whoperation.dao.warehouse.WhCheckingCollectionDao">
    <resultMap id="WhCheckingCollectionResult" type="com.baozun.scm.primservice.whoperation.model.warehouse.WhCheckingCollection">
    </resultMap>

    <resultMap id="WhCheckingCollectionPaginationResult" type="lark.common.dao.Pagination">
        <collection property="items" javaType="ArrayList" resultMap="WhCheckingCollectionResult"/>
    </resultMap>

    <!-- 用于select查询公用抽取的列 -->
    <sql id="whCheckingCollectionColumns">
        <![CDATA[
                id as id,
                facility_id as facilityId,
                temporary_location_id as temporaryLocationId,
                location_id as locationId,
                container_id as containerId,
                batch as batch,
                collection_status as collectionStatus,
                ou_id as ouId,
                outer_container_id as outerContainerId,
                container_lattice_no as containerLatticeNo,
                outboundbox_id as outboundboxId,
                outboundbox_code as outboundboxCode,
                distribution_mode as distributionMode,
                picking_mode as pickingMode,
                checking_mode as checkingMode
        ]]>
    </sql>

    <sql id="whCheckingCollectionConditionWhereExt">
        <where>
            <if test="likeEqualsMap != null">
                <foreach collection="likeEqualsMap" index="key" item="value" separator="and" open=" and ">
                    ${key} like CONCAT('%',#{value},'%')
                </foreach>
            </if>

            <if test="equalsMap != null">
                <foreach collection="equalsMap" index="key" item="value" separator="and" open=" and ">
                    ${key} = #{value}
                </foreach>
            </if>

            <if test="notEqualsMap != null">
                <foreach collection="notEqualsMap" index="key" item="value" separator="and" open=" and ">
                    ${key} != #{value}
                </foreach>
            </if>

            <if test="greateMap != null">
                <foreach collection="greateMap" index="key" item="value" separator="and" open=" and ">
                    ${key} &gt; #{value}
                </foreach>
            </if>

            <if test="greateEqualsMap != null">
                <foreach collection="greateEqualsMap" index="key" item="value" separator="and" open=" and ">
                    ${key} &gt;= #{value}
                </foreach>
            </if>

            <if test="lessMap != null">
                <foreach collection="lessMap" index="key" item="value" separator="and" open=" and ">
                    ${key} &lt; #{value}
                </foreach>
            </if>

            <if test="lessEqualsMap != null">
                <foreach collection="lessEqualsMap" index="key" item="value" separator="and" open=" and ">
                    ${key} &lt;= #{value}
                </foreach>
            </if>

            <if test="nullMap != null">
                <foreach collection="nullMap" index="key" item="value" separator="and" open=" and ">
                    ${key} is null
                </foreach>
            </if>

            <if test="notNullMap != null">
                <foreach collection="notNullMap" index="key" item="value" separator="and" open=" and ">
                    ${key} is not null
                </foreach>
            </if>

            <if test="inMap != null">
                <foreach collection="inMap" index="key" item="value" separator="and" open=" and (" close=")">
                    <foreach collection="value" item="itemin" index="index" separator="or">
                        ${key} = #{itemin}
                    </foreach>
                </foreach>
            </if>

            <if test="notInMap != null">
                <foreach collection="notInMap" index="key" item="value" separator="and" open=" and (" close=")">
                    <foreach collection="value" item="itemin" index="index" separator="and">
                        ${key} != #{itemin}
                    </foreach>
                </foreach>
            </if>
        </where>

        <if test="sortBy != null">
            <foreach collection="sortBy" item="item" separator="," open=" order by ">
                ${item.field} ${item.type}
            </foreach>
        </if>
    </sql>

    <!-- 如果有自增字段 -->

    <!-- useGeneratedKeys="true" keyProperty="xxx" for sqlserver and mysql -->
    <insert id="insert" parameterType="com.baozun.scm.primservice.whoperation.model.warehouse.WhCheckingCollection"
            useGeneratedKeys="true" keyProperty="id"
            flushCache="true">
        <![CDATA[
                INSERT INTO
                t_wh_checking_collection (
                    facility_id ,
                    temporary_location_id ,
                    location_id ,
                    container_id ,
                    batch ,
                    collection_status ,
                    ou_id ,
                    outer_container_id ,
                    container_lattice_no ,
                    outboundbox_id ,
                    outboundbox_code ,
                    distribution_mode ,
                    picking_mode ,
                    checking_mode 
                ) VALUES (
                    #{facilityId,javaType=java.lang.Long,jdbcType=BIGINT} ,
                    #{temporaryLocationId,javaType=java.lang.Long,jdbcType=BIGINT} ,
                    #{locationId,javaType=java.lang.Long,jdbcType=BIGINT} ,
                    #{containerId,javaType=java.lang.Long,jdbcType=BIGINT} ,
                    #{batch,javaType=java.lang.String,jdbcType=VARCHAR} ,
                    #{collectionStatus,javaType=java.lang.String,jdbcType=VARCHAR} ,
                    #{ouId,javaType=java.lang.Long,jdbcType=BIGINT} ,
                    #{outerContainerId,javaType=java.lang.Long,jdbcType=BIGINT} ,
                    #{containerLatticeNo,javaType=java.lang.Integer,jdbcType=INTEGER} ,
                    #{outboundboxId,javaType=java.lang.Long,jdbcType=BIGINT} ,
                    #{outboundboxCode,javaType=java.lang.String,jdbcType=VARCHAR} ,
                    #{distributionMode,javaType=java.lang.String,jdbcType=VARCHAR} ,
                    #{pickingMode,javaType=java.lang.String,jdbcType=VARCHAR} ,
                    #{checkingMode,javaType=java.lang.String,jdbcType=VARCHAR} 
                )
        ]]>

    </insert>

    <update id="update" parameterType="com.baozun.scm.primservice.whoperation.model.warehouse.WhCheckingCollection">
        <![CDATA[
            UPDATE t_wh_checking_collection SET
                facility_id = #{facilityId,javaType=java.lang.Long,jdbcType=BIGINT} ,
                temporary_location_id = #{temporaryLocationId,javaType=java.lang.Long,jdbcType=BIGINT} ,
                location_id = #{locationId,javaType=java.lang.Long,jdbcType=BIGINT} ,
                container_id = #{containerId,javaType=java.lang.Long,jdbcType=BIGINT} ,
                batch = #{batch,javaType=java.lang.String,jdbcType=VARCHAR} ,
                collection_status = #{collectionStatus,javaType=java.lang.String,jdbcType=VARCHAR} ,
                ou_id = #{ouId,javaType=java.lang.Long,jdbcType=BIGINT} ,
                outer_container_id = #{outerContainerId,javaType=java.lang.Long,jdbcType=BIGINT} ,
                container_lattice_no = #{containerLatticeNo,javaType=java.lang.Integer,jdbcType=INTEGER} ,
                outboundbox_id = #{outboundboxId,javaType=java.lang.Long,jdbcType=BIGINT} ,
                outboundbox_code = #{outboundboxCode,javaType=java.lang.String,jdbcType=VARCHAR} ,
                distribution_mode = #{distributionMode,javaType=java.lang.String,jdbcType=VARCHAR} ,
                picking_mode = #{pickingMode,javaType=java.lang.String,jdbcType=VARCHAR} ,
                checking_mode = #{checkingMode,javaType=java.lang.String,jdbcType=VARCHAR} 
            WHERE 
                id = #{id}
        ]]>
    </update>

    <update id="batchUpdate">
        UPDATE t_wh_checking_collection SET
        <foreach collection="batchUpdateMap" index="key" item="value" separator=",">
            ${key} = #{value}
        </foreach>
        <include refid="whCheckingCollectionConditionWhereExt"/>
    </update>

    <delete id="delete" parameterType="java.lang.Long">
        <![CDATA[

            delete from t_wh_checking_collection where
                id = #{id} 

        ]]>
    </delete>

    <delete id="deleteByIds" parameterType="list">

        delete from t_wh_checking_collection
        where id in
        <foreach item="item" index="index" collection="list" open="(" separator="," close=")">
            #{item}
        </foreach>

    </delete>

    <update id="batchDelete">
        delete from t_wh_checking_collection
        <include refid="whCheckingCollectionConditionWhereExt"/>
    </update>

    <select id="findById" parameterType="java.lang.Long" resultMap="WhCheckingCollectionResult" flushCache="false">
        select
        <include refid="whCheckingCollectionColumns"/>
        <![CDATA[
                from t_wh_checking_collection 
                where 
                id = #{id} 
            ]]>
    </select>

    <select id="getByIds" parameterType="list" resultMap="WhCheckingCollectionResult" flushCache="false">
        select
        <include refid="whCheckingCollectionColumns"/>
        from t_wh_checking_collection
        where id in
        <foreach item="item" index="index" collection="list" open="(" separator="," close=")">
            #{item}
        </foreach>
    </select>

    <sql id="whCheckingCollectionDynamicWhere">
        <!-- ognl访问静态方法的表达式 为@class@method(args),以下为调用rapid中的Ognl.isNotEmpty()方法,还有其它方法如isNotBlank()可以使用，具体请查看Ognl类 -->
        <where>

            <if test="id!=null">
                and id = #{id}
            </if>

            <if test="facilityId!=null">
                and facility_id = #{facilityId}
            </if>

            <if test="temporaryLocationId!=null">
                and temporary_location_id = #{temporaryLocationId}
            </if>

            <if test="locationId!=null">
                and location_id = #{locationId}
            </if>

            <if test="containerId!=null">
                and container_id = #{containerId}
            </if>

            <if test="batch!=null and batch!=''">
                and batch = #{batch}
            </if>

            <if test="collectionStatus!=null and collectionStatus!=''">
                and collection_status = #{collectionStatus}
            </if>

            <if test="ouId!=null">
                and ou_id = #{ouId}
            </if>

            <if test="outerContainerId!=null">
                and outer_container_id = #{outerContainerId}
            </if>

            <if test="containerLatticeNo!=null">
                and container_lattice_no = #{containerLatticeNo}
            </if>

            <if test="outboundboxId!=null">
                and outboundbox_id = #{outboundboxId}
            </if>

            <if test="outboundboxCode!=null and outboundboxCode!=''">
                and outboundbox_code = #{outboundboxCode}
            </if>

            <if test="distributionMode!=null and distributionMode!=''">
                and distribution_mode = #{distributionMode}
            </if>

            <if test="pickingMode!=null and pickingMode!=''">
                and picking_mode = #{pickingMode}
            </if>

            <if test="checkingMode!=null and checkingMode!=''">
                and checking_mode = #{checkingMode}
            </if>
        </where>
    </sql>

    <select id="getCount" resultType="long">
        select count(*) from t_wh_checking_collection
    </select>
    <select id="findListCountByQueryMap" resultType="long">
        select count(*) from t_wh_checking_collection
        <include refid="whCheckingCollectionDynamicWhere"/>
    </select>

    <select id="findListCountByParam" resultType="long">
        select count(*) from t_wh_checking_collection
        <include refid="whCheckingCollectionDynamicWhere"/>
    </select>

    <!--
        分页查询已经使用Dialect进行分页,也可以不使用Dialect直接编写分页
        因为分页查询将传 offset,pageSize,lastRows 三个参数,不同的数据库可以根于此三个参数属性应用不同的分页实现
    -->
    <select id="findListByQueryMapWithPage" resultMap="WhCheckingCollectionResult">
        select
        <include refid="whCheckingCollectionColumns"/>
        from t_wh_checking_collection
        <include refid="whCheckingCollectionDynamicWhere"/>

    </select>

    <select id="findListByQueryMap" resultMap="WhCheckingCollectionResult">
        select
        <include refid="whCheckingCollectionColumns"/>
        from t_wh_checking_collection
        <include refid="whCheckingCollectionDynamicWhere"/>

    </select>

    <select id="findListByParam" resultMap="WhCheckingCollectionResult">
        select
        <include refid="whCheckingCollectionColumns"/>
        from t_wh_checking_collection
        <include refid="whCheckingCollectionDynamicWhere"/>

    </select>

    <select id="query" resultMap="WhCheckingCollectionResult">
        select
        <include refid="whCheckingCollectionColumns"/>
        from t_wh_checking_collection
        <include refid="whCheckingCollectionConditionWhereExt"/>
    </select>

    <select id="queryCount" resultType="long">
        select count(*) from t_wh_checking_collection
        <include refid="whCheckingCollectionConditionWhereExt"/>
    </select>

</mapper>
