<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//ibatis.apache.org//DTD Mapper 3.0//EN"
        "http://ibatis.apache.org/dtd/ibatis-3-mapper.dtd">


<mapper namespace="com.baozun.scm.primservice.whoperation.dao.warehouse.ReplenishmentMsgDao">
    <resultMap id="whReplenishmentMsgResult" type="com.baozun.scm.primservice.whoperation.model.warehouse.ReplenishmentMsg">
    </resultMap>
    <resultMap id="whReplenishmentMsgPaginationResult" type="lark.common.dao.Pagination">
        <collection property="items" javaType="ArrayList" resultMap="whReplenishmentMsgResult"/>
    </resultMap>

    <!-- 用于select查询公用抽取的列 -->
    <sql id="whReplenishmentMsgColumns">
        <![CDATA[
                id as id,
                location_id as locationId,
                sku_id as skuId,
                upper_limit_qty as upperLimitQty,
                error_code as errorCode,
                ou_id as ouId,
                create_time as createTime,
                last_modify_time as lastModifyTime
        ]]>
    </sql>
    <sql id="whReplenishmentMsgConditionWhereExt">
        <where>
            <if test="likeEqualsMap != null">
                <foreach collection="likeEqualsMap" index="key" item="value" separator="and" open=" and ">
                    ${key} like CONCAT('%',#{value},'%')
                </foreach>
            </if>
            <if test="equalsMap != null">
                <foreach collection="equalsMap" index="key" item="value" separator="and" open=" and ">
                    ${key} = #{value}
                </foreach>
            </if>
            <if test="notEqualsMap != null">
                <foreach collection="notEqualsMap" index="key" item="value" separator="and" open=" and ">
                    ${key} != #{value}
                </foreach>
            </if>
            <if test="greateMap != null">
                <foreach collection="greateMap" index="key" item="value" separator="and" open=" and ">
                    ${key} &gt; #{value}
                </foreach>
            </if>
            <if test="greateEqualsMap != null">
                <foreach collection="greateEqualsMap" index="key" item="value" separator="and" open=" and ">
                    ${key} &gt;= #{value}
                </foreach>
            </if>
            <if test="lessMap != null">
                <foreach collection="lessMap" index="key" item="value" separator="and" open=" and ">
                    ${key} &lt; #{value}
                </foreach>
            </if>
            <if test="lessEqualsMap != null">
                <foreach collection="lessEqualsMap" index="key" item="value" separator="and" open=" and ">
                    ${key} &lt;= #{value}
                </foreach>
            </if>
            <if test="nullMap != null">
                <foreach collection="nullMap" index="key" item="value" separator="and" open=" and ">
                    ${key} is null
                </foreach>
            </if>
            <if test="notNullMap != null">
                <foreach collection="notNullMap" index="key" item="value" separator="and" open=" and ">
                    ${key} is not null
                </foreach>
            </if>
            <if test="inMap != null">
                <foreach collection="inMap" index="key" item="value" separator="and" open=" and (" close=")">
                    <foreach collection="value" item="itemin" index="index" separator="or">
                        ${key} = #{itemin}
                    </foreach>
                </foreach>
            </if>
            <if test="notInMap != null">
                <foreach collection="notInMap" index="key" item="value" separator="and" open=" and (" close=")">
                    <foreach collection="value" item="itemin" index="index" separator="and">
                        ${key} != #{itemin}
                    </foreach>
                </foreach>
            </if>
        </where>
        <if test="sortBy != null">
            <foreach collection="sortBy" item="item" separator="," open=" order by ">
                ${item.field} ${item.type}
            </foreach>
        </if>
    </sql>

    <!-- 如果有自增字段 -->

    <!-- useGeneratedKeys="true" keyProperty="xxx" for sqlserver and mysql -->
    <insert id="insert" parameterType="com.baozun.scm.primservice.whoperation.model.warehouse.ReplenishmentMsg"

            flushCache="true">
        <![CDATA[
                INSERT INTO
                t_wh_replenishment_msg (
                id,
                    location_id ,
                    sku_id ,
                    upper_limit_qty ,
                    error_code ,
                    ou_id ,
                    create_time ,
                    last_modify_time 
                ) VALUES (
                #{id,javaType=java.lang.Long,jdbcType=BIGINT} ,
                    #{locationId,javaType=java.lang.Long,jdbcType=BIGINT} ,
                    #{skuId,javaType=java.lang.Long,jdbcType=BIGINT} ,
                    #{upperLimitQty,javaType=Long,jdbcType=DECIMAL} ,
                    #{errorCode,javaType=java.lang.String,jdbcType=VARCHAR} ,
                    #{ouId,javaType=java.lang.Long,jdbcType=BIGINT} ,
                    #{createTime,javaType=java.util.Date,jdbcType=TIMESTAMP} ,
                    #{lastModifyTime,javaType=java.util.Date,jdbcType=TIMESTAMP} 
                )
            ]]>

    </insert>


    <update id="update" parameterType="com.baozun.scm.primservice.whoperation.model.warehouse.ReplenishmentMsg">
        <![CDATA[
            UPDATE t_wh_replenishment_msg SET
                location_id = #{locationId,javaType=java.lang.Long,jdbcType=BIGINT} ,
                sku_id = #{skuId,javaType=java.lang.Long,jdbcType=BIGINT} ,
                upper_limit_qty = #{upperLimitQty,javaType=Long,jdbcType=DECIMAL} ,
                error_code = #{errorCode,javaType=java.lang.String,jdbcType=VARCHAR} ,
                ou_id = #{ouId,javaType=java.lang.Long,jdbcType=BIGINT} ,
                create_time = #{createTime,javaType=java.util.Date,jdbcType=TIMESTAMP} ,
                last_modify_time = #{lastModifyTime,javaType=java.util.Date,jdbcType=TIMESTAMP} 
            WHERE 
                id = #{id} 
        ]]>
    </update>
    <update id="batchUpdate">
        UPDATE t_wh_replenishment_msg SET
        <foreach collection="batchUpdateMap" index="key" item="value" separator=",">
            ${key} = #{value}
        </foreach>
        <include refid="whReplenishmentMsgConditionWhereExt"/>
    </update>

    <delete id="delete" parameterType="java.lang.Long">
        <![CDATA[
            delete from t_wh_replenishment_msg where
                id = #{id} 
        ]]>
    </delete>

    <delete id="deleteByIds" parameterType="list">

        delete from t_wh_replenishment_msg
        where id in
        <foreach item="item" index="index" collection="list" open="(" separator="," close=")">
            #{item}
        </foreach>

    </delete>
    <update id="batchDelete">
        delete from t_wh_replenishment_msg
        <include refid="whReplenishmentMsgConditionWhereExt"/>
    </update>

    <select id="findById" parameterType="java.lang.Long" resultMap="whReplenishmentMsgResult" flushCache="false">
        select
        <include refid="whReplenishmentMsgColumns"/>
        <![CDATA[
                from t_wh_replenishment_msg 
                where 
                id = #{id} 
            ]]>
    </select>
    <select id="getByIds" parameterType="list" resultMap="whReplenishmentMsgResult" flushCache="false">
        select
        <include refid="whReplenishmentMsgColumns"/>
        from t_wh_replenishment_msg
        where id in
        <foreach item="item" index="index" collection="list" open="(" separator="," close=")">
            #{item}
        </foreach>
    </select>
    <sql id="whReplenishmentMsgDynamicWhere">
        <!-- ognl访问静态方法的表达式 为@class@method(args),以下为调用rapid中的Ognl.isNotEmpty()方法,还有其它方法如isNotBlank()可以使用，具体请查看Ognl类 -->
        <where>

            <if test="id!=null">
                and id = #{id}
            </if>

            <if test="locationId!=null">
                and location_id = #{locationId}
            </if>

            <if test="skuId!=null">
                and sku_id = #{skuId}
            </if>

            <if test="upperLimitQty!=null">
                and upper_limit_qty = #{upperLimitQty}
            </if>


            <if test="errorCode!=null and errorCode!=''">
                and error_code = #{errorCode}
            </if>

            <if test="ouId!=null">
                and ou_id = #{ouId}
            </if>

            <if test="createTime!=null">
                and create_time = #{createTime}
            </if>

            <if test="lastModifyTime!=null">
                and last_modify_time = #{lastModifyTime}
            </if>
        </where>
    </sql>


    <select id="getCount" resultType="long">
        select count(*) from t_wh_replenishment_msg
    </select>
    <select id="findListCountByQueryMap" resultType="long">
        select count(*) from t_wh_replenishment_msg
        <include refid="whReplenishmentMsgDynamicWhere"/>
    </select>

    <select id="findListCountByParam" resultType="long">
        select count(*) from t_wh_replenishment_msg
        <include refid="whReplenishmentMsgDynamicWhere"/>
    </select>

    <!--
        分页查询已经使用Dialect进行分页,也可以不使用Dialect直接编写分页
        因为分页查询将传 offset,pageSize,lastRows 三个参数,不同的数据库可以根于此三个参数属性应用不同的分页实现
    -->
    <select id="findListByQueryMapWithPage" resultMap="whReplenishmentMsgResult">
        select
        <include refid="whReplenishmentMsgColumns"/>
        from t_wh_replenishment_msg
        <include refid="whReplenishmentMsgDynamicWhere"/>

    </select>

    <select id="findListByQueryMap" resultMap="whReplenishmentMsgResult">
        select
        <include refid="whReplenishmentMsgColumns"/>
        from t_wh_replenishment_msg
        <include refid="whReplenishmentMsgDynamicWhere"/>

    </select>

    <select id="findListByParam" resultMap="whReplenishmentMsgResult">
        select
        <include refid="whReplenishmentMsgColumns"/>
        from t_wh_replenishment_msg
        <include refid="whReplenishmentMsgDynamicWhere"/>

    </select>

    <select id="query" resultMap="whReplenishmentMsgResult">
        select
        <include refid="whReplenishmentMsgColumns"/>
        from t_wh_replenishment_msg
        <include refid="whReplenishmentMsgConditionWhereExt"/>
    </select>

    <select id="queryCount" resultType="long">
        select count(*) from t_wh_replenishment_msg
        <include refid="whReplenishmentMsgConditionWhereExt"/>
    </select>


</mapper>
